<!-- vim: set ft=markdown: -->
cfn-tool-deploy(1) -- deploy cloudformation stacks
==================================================

## SYNOPSIS

`cfn-tool` `deploy` [<OPTIONS>...] <TEMPLATE-FILE> <STACK-NAME>

## DESCRIPTION

Deploys the template <TEMPLATE-FILE> to the cloudformation stack named
<STACK-NAME>. If a stack named <STACK-NAME> already exists it is updated,
otherwise a new stack is created.

Each raw template file is processed as follows: macros are expanded, nested
templates are recursively processed, packages are prepared for upload, and
their S3 URIs are computed. The processed template is then linted (optionally)
and validated with the AWS CloudFormation API.

When all templates have been successfully processed, any nested templates are
uploaded to S3 with their associated packages and the stack is deployed.

## OPTIONS

The `deploy` command accepts the following options:

  * `-b`, `--bucket`=<NAME>:
    Upload templates to the S3 bucket given by <NAME>. A bucket must be
    specified when nested stacks are used, or when the template specified by
    <TEMPLATE-FILE> is more than 51KiB in size.

  * `-k`, `--keep`:
    Don't delete the temporary directory containing processed templates when
    `cfn-tool` exits. This can be useful for debugging.

  * `-l`, `--linter`=<COMMAND>:
    Run <COMMAND> on each processed template file, aborting if the <COMMAND>
    fails. The template file path is appended to the <COMMAND> string and the
    resulting command line is evaluated in the `bash`(1) shell (see the
    `EXAMPLES` section below). The <COMMAND> is executed with its working
    directory set to the current directory (ie. the directory in which the
    `cfn-tool` program runs).

  * `-P`, `--parameters`="<KEY>=<VALUE> [<KEY>=<VALUE> ...]":
    Set template input parameter overrides. When updating an existing stack the
    values of any unspecified parameters will be preserved.

  * `-p`, `--profile`=<NAME>:
    Use the AWS profile given by <NAME> to configure the AWS credentials
    provider chain. When this option is specified the <NAME> is propagated to
    child processes via the `AWS_PROFILE` environment variable (eg. when the
    `aws`(1) tool is called from a template).

  * `-q`, `--quiet`:
    Suppress all informational, diagnostic, and warning output.

  * `-r`, `--region`=<NAME>:
    Use the AWS region given by <NAME> for all AWS API calls. When this option
    is specified the <NAME> is propagated to child processes via the
    `AWS_REGION` and `AWS_DEFAULT_REGION` environment variables (eg. when the
    `aws`(1) tool is called from a template).

  * `-t`, `--tags`="<KEY>=<VALUE> [<KEY>=<VALUE> ...]":
    A list of tags to associate with the stack that is created or updated. AWS
    CloudFormation also propagates these tags to resources in the stack if the
    resource supports it.

  * `-v`, `--verbose`:
    Print extra diagnostic output while processing.

## EXAMPLES

Using `cfn-lint`(1) to lint processed templates:

    $ cfn-tool deploy --linter "cfn-lint -f pretty" my-template.yml my-stack

Specifying tags and parameters as key-value pairs:

    $ cfn-tool deploy --tags "Foo=bar Baz=baf" my-template.yml my-stack
    $ cfn-tool deploy --parameters "Foo=bar Baz=baf" my-template.yml my-stack

## EXIT STATUS

Exits with a status of 1 if an error occurred, or 0 otherwise.

## BUGS

Please open an issue: <https://github.com/daggerml/cfn-tool/issues>.

## SEE ALSO

Man pages for other commands:

  * `cfn-tool`(1)
  * `cfn-tool-transform`(1)
  * `cfn-tool-update`(1)

Documentation for built-in macros:

  * `cfn-tool-macros`(7)

## COPYRIGHT

Copyright Â© ${YEAR} Micha Niskin `<micha.niskin@gmail.com>`, distributed under
the following license:

* <https://raw.githubusercontent.com/daggerml/cfn-tool/${VERSION}/LICENSE>

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
