// Generated by CoffeeScript 2.5.1
(function() {
  var CfnError, abortOnException, assertOk, assoc, identity, invertObj, objKeys, objVals, selectKeys, split, typeOf,
    indexOf = [].indexOf;

  CfnError = require('./CfnError');

  identity = function(x) {
    return x;
  };

  assoc = function(xs, k, v) {
    xs[k] = v;
    return xs;
  };

  objKeys = function(x) {
    return Object.keys(x);
  };

  objVals = function(x) {
    return objKeys(x).reduce((function(ys, y) {
      return ys.concat([x[y]]);
    }), []);
  };

  selectKeys = function(o, ks) {
    return Object.keys(o).reduce((function(xs, x) {
      if (indexOf.call(ks, x) >= 0) {
        return assoc(xs, x, o[x]);
      } else {
        return xs;
      }
    }), {});
  };

  invertObj = function(o) {
    return Object.keys(o).reduce((function(xs, x) {
      return assoc(xs, o[x], x);
    }), {});
  };

  split = function(str, sep, count = 2e308) {
    var n, toks;
    toks = str.split(sep);
    n = Math.min(toks.length, count) - 1;
    return toks.slice(0, n).concat(toks.slice(n).join(sep));
  };

  assertOk = function(x, msg, body) {
    if (!x) {
      throw new CfnError(msg, body);
    }
    return x;
  };

  typeOf = function(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
  };

  abortOnException = function(abort, lib, fn) {
    return (typeOf(fn) === 'Array' ? fn : [fn]).forEach(function(x) {
      return global[x] = function(...args) {
        var e;
        try {
          return lib[x].apply(lib, args);
        } catch (error) {
          e = error;
          return abort(e);
        }
      };
    });
  };

  module.exports = {identity, assoc, objKeys, objVals, selectKeys, invertObj, split, assertOk, typeOf, abortOnException};

}).call(this);

//# sourceMappingURL=fn.js.map
