{
  "version": 3,
  "file": "fn.js",
  "sourceRoot": "..",
  "sources": [
    "lib/fn.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "assert    = require 'assert'\ncrypto    = require 'crypto'\nfs        = require 'fs'\npath      = require 'path'\nCfnError  = require './CfnError'\n\ndbg = (x) ->\n  console.log require('util').inspect {dbg: x}, {depth: null}\n  x\n\nmd5 = (data) ->\n  crypto.createHash(\"md5\").update(data).digest(\"hex\")\n\nmd5File = (filePath) ->\n  md5(fs.readFileSync(filePath))\n\nmd5Dir = (dirPath) ->\n  origDir = process.cwd()\n  try\n    process.chdir(dirPath)\n    add2tree = (tree, path) -> assoc(tree, path, md5Path(path))\n    md5(JSON.stringify(fs.readdirSync('.').sort().reduce(add2tree, {})))\n  finally\n    process.chdir(origDir)\n\nmd5Path = (path) ->\n  (if isDirectory(path) then md5Dir else md5File)(path)\n\nidentity = (x) -> x\n\nassoc = (xs, k, v) ->\n  xs[k] = v\n  xs\n\nconj = (xs, x) ->\n  xs.push(x)\n  xs\n\nmerge = (args...) ->\n  Object.assign.apply(null, args)\n\ndeepMerge = (args...) ->\n  dm = (x, y) ->\n    if not (isObject(x) and isObject(y))\n      y\n    else\n      ret = Object.assign({}, x)\n      ret[k] = dm(x[k], v) for k, v of y\n      ret\n  args.reduce(((xs, x) -> dm(xs, x)), {})\n\nhashMap = (args...) ->\n  ret = {}\n  ret[args[2*i]] = args[2*i+1] for i in [0...args.length/2]\n  ret\n\nobjKeys = (x) -> Object.keys(x)\n\nobjVals = (x) -> objKeys(x).reduce(((ys, y) -> ys.concat([x[y]])), [])\n\nreduceKv = (map, f) ->\n  Object.keys(map).reduce(((xs, k) -> f(xs, k, map[k])), {})\n\nselectKeys = (o, ks) ->\n  Object.keys(o).reduce(((xs, x) -> if x in ks then assoc(xs, x, o[x]) else xs), {})\n\nnotEmpty = (map) ->\n  Object.keys(map or {}).length > 0\n\ninvertObj = (o) ->\n  Object.keys(o).reduce(((xs, x) -> assoc xs, o[x], x), {})\n\npeek = (ary) -> ary[ary.length - 1]\n\ngetIn = (obj, ks) -> ks.reduce(((xs, x) -> xs[x]), obj)\n\nsplit = (str, sep, count=Infinity) ->\n  toks  = str.split(sep)\n  n     = Math.min(toks.length, count) - 1\n  toks[0...n].concat(toks[n..].join(sep))\n\nassertOk = (x, msg, body) ->\n  throw new CfnError(msg, body) unless x\n  x\n\ntypeOf = (thing) ->\n  Object::toString.call(thing).slice(8,-1)\n\nisString  = (x) -> typeOf(x) is 'String'\nisArray   = (x) -> typeOf(x) is 'Array'\nisObject  = (x) -> typeOf(x) is 'Object'\nisBoolean = (x) -> typeOf(x) is 'Boolean'\n\nassertObject = (thing) ->\n  assert.ok(typeOf(thing) in [\n    'Object'\n    'Undefined'\n    'Null'\n  ], \"expected an Object, got #{JSON.stringify(thing)}\")\n  thing\n\nassertArray = (thing) ->\n  assert.ok(isArray(thing), \"expected an Array, got #{JSON.stringify(thing)}\")\n  thing\n\nisDirectory = (file) ->\n  fs.statSync(file).isDirectory()\n\nfileExt = (file) ->\n  if (e = split(path.basename(file), '.', 2)[1])? then \".#{e}\"\n\nreadFile = (file) ->\n  fs.readFileSync(file).toString('utf-8')\n\nabortOnException = (abort, lib, fn) ->\n  (if typeOf(fn) is 'Array' then fn else [fn]).forEach (x) ->\n    global[x] = (args...) ->\n      try\n        lib[x].apply(lib, args)\n      catch e\n        abort(e)\n\nmergeStrings = (toks, sep = '') ->\n  reducer = (xs, x) ->\n    x = \"#{x}\" unless isObject(x)\n    y = xs.pop()\n    xs.concat(if isString(x) and isString(y) then [[y,x].join(sep)] else [y,x])\n  toks.reduce(reducer, []).filter((x) -> x? and x isnt '')\n\nprependLines = (x, prefix) ->\n  return null unless x and isString(x)\n  x.split(/\\n/)\n    .map((x) -> x.trimRight())\n    .filter(identity)\n    .map((x) -> \"#{prefix}| #{x}\")\n    .join('\\n')\n\nrmCR = (x='') ->\n  lines = []\n  for v in x.split(/\\r/)\n    if v[0] is '\\n' then v = v.slice(1) else lines.pop()\n    lines.push(w) for w in v.split(/\\n/)\n  lines.join('\\n')\n\ndeepEqual = (x, y) ->\n  try not assert.deepEqual(x, y) catch e then false\n\nmodule.exports = {\n  # debug\n  dbg\n\n  # crypto\n  md5\n  md5File\n  md5Dir\n  md5Path\n\n  # values\n  identity\n  deepEqual\n\n  # collections\n  assoc\n  conj\n  merge\n  deepMerge\n  hashMap\n  objKeys\n  objVals\n  reduceKv\n  selectKeys\n  notEmpty\n  invertObj\n  peek\n  getIn\n  split\n\n  # strings\n  mergeStrings\n  prependLines\n  rmCR\n\n  # decorators\n  abortOnException\n\n  # types\n  typeOf\n  isString\n  isArray\n  isObject\n  isBoolean\n  isDirectory\n\n  # assertions\n  assertOk\n  assertObject\n  assertArray\n\n  # files\n  fileExt\n  readFile\n}\n"
  ]
}