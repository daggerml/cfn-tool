{
  "version": 3,
  "file": "fn.js",
  "sourceRoot": "..",
  "sources": [
    "lib/fn.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "assert      = require 'assert'\n{spawnSync} = require 'child_process'\ncrypto      = require 'crypto'\nfs          = require 'fs'\nos          = require 'os'\npath        = require 'path'\nlog         = require './log'\nCfnError    = require './CfnError'\n\n#------------------------------------------------------------------------------\n# debugging functions\n#------------------------------------------------------------------------------\n\ndbg = module.exports.dbg = (x) ->\n  console.log require('util').inspect {dbg: x}, {depth: null}\n  x\n\n#------------------------------------------------------------------------------\n# crypto functions\n#------------------------------------------------------------------------------\n\nmd5 = module.exports.md5 = (data) ->\n  crypto.createHash(\"md5\").update(data).digest(\"hex\")\n\nmd5File = module.exports.md5File = (filePath) ->\n  md5(fs.readFileSync(filePath))\n\nmd5Dir = module.exports.md5Dir = (dirPath) ->\n  origDir = process.cwd()\n  try\n    process.chdir(dirPath)\n    add2tree = (tree, path) -> assoc(tree, path, md5Path(path))\n    md5(JSON.stringify(fs.readdirSync('.').sort().reduce(add2tree, {})))\n  finally\n    process.chdir(origDir)\n\nmd5Path = module.exports.md5Path = (path) ->\n  (if isDirectory(path) then md5Dir else md5File)(path)\n\n#------------------------------------------------------------------------------\n# collection functions\n#------------------------------------------------------------------------------\n\nassoc = module.exports.assoc = (xs, k, v) ->\n  xs[k] = v\n  xs\n\nconj = module.exports.conj = (xs, x) ->\n  xs.push(x)\n  xs\n\nmerge = module.exports.merge = (args...) ->\n  Object.assign.apply(null, args)\n\ndeepMerge = module.exports.deepMerge = (args...) ->\n  dm = (x, y) ->\n    if not (isObject(x) and isObject(y))\n      y\n    else\n      ret = Object.assign({}, x)\n      ret[k] = dm(x[k], v) for k, v of y\n      ret\n  args.reduce(((xs, x) -> dm(xs, x)), {})\n\nhashMap = module.exports.hashMap = (args...) ->\n  ret = {}\n  ret[args[2*i]] = args[2*i+1] for i in [0...args.length/2]\n  ret\n\nobjKeys = module.exports.objKeys = (x) -> Object.keys(x)\n\nobjVals = module.exports.objVals = (x) -> objKeys(x).reduce(((ys, y) -> ys.concat([x[y]])), [])\n\nreduceKv = module.exports.reduceKv = (map, f) ->\n  Object.keys(map).reduce(((xs, k) -> f(xs, k, map[k])), {})\n\nselectKeys = module.exports.selectKeys = (o, ks) ->\n  Object.keys(o).reduce(((xs, x) -> if x in ks then assoc(xs, x, o[x]) else xs), {})\n\nnotEmpty = module.exports.notEmpty = (map) ->\n  Object.keys(map or {}).length > 0\n\ninvertObj = module.exports.invertObj = (o) ->\n  Object.keys(o).reduce(((xs, x) -> assoc xs, o[x], x), {})\n\npeek = module.exports.peek = (ary) -> ary[ary.length - 1]\n\ngetIn = module.exports.getIn = (obj, ks) -> ks.reduce(((xs, x) -> xs[x]), obj)\n\n#------------------------------------------------------------------------------\n# string functions\n#------------------------------------------------------------------------------\n\nsplit = module.exports.split = (str, sep, count=Infinity) ->\n  toks  = str.split(sep)\n  n     = Math.min(toks.length, count) - 1\n  toks[0...n].concat(toks[n..].join(sep))\n\nmergeStrings = module.exports.mergeStrings = (toks, sep = '') ->\n  reducer = (xs, x) ->\n    x = \"#{x}\" unless isObject(x)\n    y = xs.pop()\n    xs.concat(if isString(x) and isString(y) then [[y,x].join(sep)] else [y,x])\n  toks.reduce(reducer, []).filter((x) -> x? and x isnt '')\n\nprependLines = module.exports.prependLines = (x, prefix) ->\n  return null unless x and isString(x)\n  x.split(/\\n/)\n    .map((x) -> x.trimRight())\n    .filter(identity)\n    .map((x) -> \"#{prefix}| #{x}\")\n    .join('\\n')\n\nrmCR = module.exports.rmCR = (x='') ->\n  lines = []\n  for v in x.split(/\\r/)\n    if v[0] is '\\n' then v = v.slice(1) else lines.pop()\n    lines.push(w) for w in v.split(/\\n/)\n  lines.join('\\n')\n\n#------------------------------------------------------------------------------\n# type functions\n#------------------------------------------------------------------------------\n\ntypeOf = module.exports.typeOf = (thing) ->\n  Object::toString.call(thing).slice(8, 11)\n\nisString      = module.exports.isString     = (x) -> typeOf(x) is 'Str'\nisNumber      = module.exports.isNumber     = (x) -> typeOf(x) is 'Num'\nisArray       = module.exports.isArray      = (x) -> typeOf(x) is 'Arr'\nisObject      = module.exports.isObject     = (x) -> typeOf(x) is 'Obj'\nisBoolean     = module.exports.isBoolean    = (x) -> typeOf(x) is 'Boo'\nisNull        = module.exports.isNull       = (x) -> typeOf(x) is 'Nul'\nisUndefined   = module.exports.isUndefined  = (x) -> typeOf(x) is 'Und'\nisScalar      = module.exports.isScalar     = (x) -> typeOf(x) in ['Str', 'Num', 'Boo', 'Nul']\nisCollection  = module.exports.isCollection = (x) -> typeOf(x) in ['Arr', 'Obj']\n\n#------------------------------------------------------------------------------\n# assertion functions\n#------------------------------------------------------------------------------\n\nassertOk = module.exports.assertOk = (x, msg, body) ->\n  throw new CfnError(msg, body) unless x\n  x\n\nassertObject = module.exports.assertObject = (thing) ->\n  assert.ok(typeOf(thing) in [\n    'Obj'\n    'Nul'\n  ], \"expected an Object, got #{JSON.stringify(thing)}\")\n  thing\n\nassertArray = module.exports.assertArray = (thing) ->\n  assert.ok(isArray(thing), \"expected an Array, got #{JSON.stringify(thing)}\")\n  thing\n\n#------------------------------------------------------------------------------\n# filesystem I/O functions\n#------------------------------------------------------------------------------\n\ntmpdir = module.exports.tmpdir = (prefix, keep = false) ->\n  dir = fs.mkdtempSync([os.tmpdir(), prefix].join('/'))\n  process.on 'exit', () -> fs.rmdirSync(dir, {recursive: true}) unless keep\n  dir\n\nisDirectory = module.exports.isDirectory = (file) ->\n  fs.statSync(file).isDirectory()\n\nfileExt = module.exports.fileExt = (file) ->\n  if (e = split(path.basename(file), '.', 2)[1])? then \".#{e}\"\n\nreadFile = module.exports.readFile = (file) ->\n  fs.readFileSync(file).toString('utf-8')\n\nabortOnException = module.exports.abortOnException = (abort, lib, fn) ->\n  (if typeOf(fn) is 'Array' then fn else [fn]).forEach (x) ->\n    global[x] = (args...) ->\n      try\n        lib[x].apply(lib, args)\n      catch e\n        abort(e)\n\n#------------------------------------------------------------------------------\n# child process functions\n#------------------------------------------------------------------------------\n\nhandleShell = module.exports.handleShell = (cmd, res, raw) ->\n  cmd = prependLines cmd, 'cmd'\n  stdout = rmCR res.stdout?.toString('utf-8')\n  stderr = rmCR res.stderr?.toString('utf-8')\n  res.out = prependLines(stdout, 'out')\n  res.err = prependLines(stderr, 'err')\n  res.all = [res.out, res.err].filter(identity).join('\\n')\n  if raw\n    res\n  else\n    if res.status is 0\n      log.verbose \"bash: status 0\", {body: \"#{cmd}\\n#{res.all}\"}\n      stdout\n    else\n      throw new CfnError(\"bash: exit status #{res.status}\", \"#{cmd}\\n#{res.all}\")\n\nexecShell = module.exports.execShell = (cmd, opts, raw=false) ->\n  res = spawnSync(cmd, merge({stdio: 'pipe', shell: '/bin/bash'}, opts))\n  handleShell cmd, res, raw\n\nexecShellArgs = module.exports.execShellArgs = (cmd, args, opts, raw=false) ->\n  res = spawnSync(cmd, args, merge({stdio: 'pipe', shell: '/bin/bash'}, opts))\n  handleShell cmd, res, raw\n\ntryExecRaw = module.exports.tryExecRaw = (cmd, msg) ->\n  res = execShell cmd, null, true\n  cmd = prependLines cmd, 'cmd'\n  if res.status is 0\n    log.verbose \"bash: status 0\", {body: \"#{cmd}\\n#{res.all}\"}\n  else\n    log.verbose \"bash: exit status #{res.status}\", {body: cmd}\n    throw new CfnError msg, res.all\n\n#------------------------------------------------------------------------------\n# misc functions\n#------------------------------------------------------------------------------\n\nidentity = module.exports.identity = (x) -> x\n\npartial = module.exports.partial = (f, obj, args...) ->\n  (args2...) -> f.apply obj, args.concat(args2)\n\ndeepEqual = module.exports.deepEqual = (x, y) ->\n  try not assert.deepEqual(x, y) catch e then false\n"
  ]
}