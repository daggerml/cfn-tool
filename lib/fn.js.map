{
  "version": 3,
  "file": "fn.js",
  "sourceRoot": "..",
  "sources": [
    "lib/fn.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "CfnError = require './CfnError'\n\nidentity = (x) -> x\n\nassoc = (xs, k, v) ->\n  xs[k] = v\n  xs\n\nobjKeys = (x) -> Object.keys(x)\nobjVals = (x) -> objKeys(x).reduce(((ys, y) -> ys.concat([x[y]])), [])\n\nselectKeys = (o, ks) ->\n  Object.keys(o).reduce(((xs, x) -> if x in ks then assoc(xs, x, o[x]) else xs), {})\n\ninvertObj = (o) ->\n  Object.keys(o).reduce(((xs, x) -> assoc xs, o[x], x), {})\n\nsplit = (str, sep, count=Infinity) ->\n  toks  = str.split(sep)\n  n     = Math.min(toks.length, count) - 1\n  toks[0...n].concat(toks[n..].join(sep))\n\nassertOk = (x, msg, body) ->\n  throw new CfnError(msg, body) unless x\n  x\n\ntypeOf = (thing) ->\n  Object::toString.call(thing).slice(8,-1)\n\nabortOnException = (abort, lib, fn) ->\n  (if typeOf(fn) is 'Array' then fn else [fn]).forEach (x) ->\n    global[x] = (args...) ->\n      try\n        lib[x].apply(lib, args)\n      catch e\n        abort(e)\n\nmodule.exports = {\n  identity\n  assoc\n  objKeys\n  objVals\n  selectKeys\n  invertObj\n  split\n  assertOk\n  typeOf\n  abortOnException\n}\n"
  ]
}