{
  "version": 3,
  "file": "yaml-transformer.js",
  "sourceRoot": "..",
  "sources": [
    "lib/yaml-transformer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "yaml    = require 'js-yaml'\nassert  = require 'assert'\nfn      = require './fn'\n\n#=============================================================================#\n# TRANSFORMER BASE CLASS                                                      #\n#=============================================================================#\n\nclass YamlTransformer\n  constructor: ->\n    @tags     = []\n    @macros   = {}\n    @specials = {}\n    @keystack = []\n    @objstack = []\n\n  abort: (msg...) ->\n    throw new Error(\"at #{@keystack.join('/')}: #{msg.join(' ')}\")\n\n  walkObject: (xs) ->\n    ks  = Object.keys(xs)\n    @withObj xs, =>\n      ks.reduce(((ret, k) =>\n        v = xs[k]\n        @withKey k, =>\n          v = if (s = @specials[k])\n            s(v)\n          else if (m = @macros[k])\n            m(@walk(v))\n          else\n            fn.hashMap(k, @walk(v))\n          if ks.length is 1 then v else fn.merge(ret, fn.assertObject(v))\n      ), {})\n\n  walkArray: (xs) ->\n    @withObj xs, =>\n      xs.map (v, i) =>\n        @withKey(\"#{i}\", => @walk(v))\n\n  walk: (thing) ->\n    ret = switch fn.typeOf(thing)\n      when 'Object' then @walkObject(thing)\n      when 'Array'  then @walkArray(thing)\n      else thing\n    if fn.deepEqual(thing, ret) then ret else @walk(ret)\n\n  withObj: (obj, f) ->\n    @objstack.push(obj)\n    ret = f()\n    @objstack.pop()\n    ret\n\n  withKey: (key, f) ->\n    @keystack.push(key?.split?(/ +/).shift().replace(/^Fn::/, '!'))\n    ret = f()\n    @keystack.pop()\n    ret\n\n  deftag: (tag, long) ->\n    emit = (form) -> fn.hashMap(long, form)\n    for kind in ['scalar', 'sequence', 'mapping']\n      @tags.push(new yaml.Type(tag, {kind, construct: emit}))\n    @\n\n  _defform: (namespace, tag, long, emit) ->\n    short = \"!#{tag}\"\n    long ?= \"Fn::#{tag}\"\n    @deftag(short, long)\n    if emit\n      namespace[long] = (args...) =>\n        try\n          emit.apply(null, args)\n        catch e then @abort e\n    @\n\n  defspecial: (tag, long, emit) ->\n    [long, emit] = [emit, long] unless emit\n    @_defform(@specials, tag, long, emit)\n\n  defmacro: (tag, long, emit) ->\n    [long, emit] = [emit, long] unless emit\n    @_defform(@macros, tag, long, emit)\n\n  parse: (textOrDoc) ->\n    return textOrDoc unless fn.isString(textOrDoc)\n    yaml.safeLoad(textOrDoc, {schema: yaml.Schema.create(@tags)})\n\n  dump: (doc) ->\n    yaml.safeDump(doc)\n\n  transform: (textOrDoc) ->\n    @keystack.splice(0)\n    @objstack.splice(0)\n    @dump(@walk(@parse(textOrDoc)))\n\nmodule.exports = YamlTransformer\n"
  ]
}