{
  "version": 3,
  "file": "GetOpts.js",
  "sourceRoot": "..",
  "sources": [
    "lib/GetOpts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs        = require 'fs'\ngetopts   = require 'getopts'\n{inspect} = require 'util'\npath      = require 'path'\nuuid      = require 'uuid'\nfn        = require './fn'\nlog       = require './log'\nCfnError  = require './CfnError'\n\nclass GetOpts\n  constructor: (@master) ->\n\n  allOpts: () ->\n    @config.boolean.concat(@config.string)\n\n  allPos: () ->\n    @config.positional\n\n  configure: (opts = [], abort = true) ->\n    optf = (x) -> x in opts\n    @config =\n      alias:      fn.selectKeys(@master.alias, opts)\n      boolean:    @master.boolean.slice().filter optf\n      string:     Object.keys(@master.string).filter optf\n      positional: Object.keys(@master.positional).filter optf\n      unknown:    if abort then @master.unknown else ((x) ->)\n\n  usage: () ->\n    bools   = @config.boolean\n    strs    = @config.string\n    args    = @config.positional\n    alias   = (x) => if (y = @config.alias[x]) then \"-#{y}, \" else ''\n    optbool = (x) -> \"[#{alias(x)}--#{x}]\"\n    optstr  = (x) => \"[#{alias(x)}--#{x}=#{@master.string[x]}]\"\n    optarg  = (x) -> if x in bools then optbool(x) else optstr(x)\n    optpos  = (x) => @master.positional[x]\n    bools.concat(strs).sort().map(optarg).concat(args.map(optpos).filter(fn.identity))\n\n  parse: (argv) ->\n    opts = getopts argv, @config\n    args = @config.positional\n    (opts[k] = arg if (k = args[i])) for arg, i in opts._\n    fn.selectKeys opts, @allOpts().concat(@allPos())\n\n  validateArgs: (opts) ->\n    for k, i in @config.positional\n      fn.assertOk opts[k], \"#{@master.positional[k] or k} argument required\"\n\n  completeOpt: (words = []) ->\n    used  = fn.objKeys(@parse words, {noenv: true}).map((x) -> \"--#{x}\")\n    longs = @allOpts().map((x) -> \"--#{x}\")\n    longs.sort().filter((x) -> not (x in used))\n\nmodule.exports = GetOpts\n"
  ]
}