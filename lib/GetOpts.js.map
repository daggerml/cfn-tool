{
  "version": 3,
  "file": "GetOpts.js",
  "sourceRoot": "..",
  "sources": [
    "lib/GetOpts.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,QAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA;IAAA;;EAAA,EAAA,GAAY,OAAA,CAAQ,IAAR;;EACZ,OAAA,GAAY,OAAA,CAAQ,SAAR;;EACZ,CAAA,CAAC,OAAD,CAAA,GAAY,OAAA,CAAQ,MAAR,CAAZ;;EACA,IAAA,GAAY,OAAA,CAAQ,MAAR;;EACZ,IAAA,GAAY,OAAA,CAAQ,MAAR;;EACZ,EAAA,GAAY,OAAA,CAAQ,MAAR;;EACZ,GAAA,GAAY,OAAA,CAAQ,OAAR;;EACZ,QAAA,GAAY,OAAA,CAAQ,YAAR;;EAEN,UAAN,MAAA,QAAA;IACE,WAAa,OAAA,CAAA;MAAC,IAAC,CAAA;MACb,IAAC,CAAA,SAAD,CAAA;IADW,CAAf;;;;;IAOE,OAAS,CAAA,CAAA;aACP,IAAC,CAAA,MAAM,CAAC,OAAO,CAAC,MAAhB,CAAuB,IAAC,CAAA,MAAM,CAAC,MAA/B;IADO;;IAGT,MAAQ,CAAA,CAAA;aACN,IAAC,CAAA,MAAM,CAAC;IADF;;IAGR,OAAS,CAAA,CAAA;aACP,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,OAAD,CAAA,CAAZ;IADO;;IAGT,UAAY,CAAA,CAAA;aACV,MAAM,CAAC,IAAP,CAAY,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,UAAH,CAAc,IAAC,CAAA,OAAD,CAAA,CAAd,EAA0B,IAAC,CAAA,OAAD,CAAA,CAA1B,CAAb,CAAZ;IADU;;IAGZ,OAAS,CAAA,CAAA;aACP,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,OAAD,CAAA,CAAZ,CAAuB,CAAC,MAAxB,CACE,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;QAAW,IAAG,sBAAH;iBAAwB,EAAE,CAAC,MAAH,CAAU,CAAC,CAAD,CAAV,EAAxB;SAAA,MAAA;iBAA2C,GAA3C;;MAAX,CADF,EAEE,EAFF;IADO;;IAMT,OAAS,CAAC,CAAD,CAAA;MACP,IAAG,CAAH;eACE,IAAC,CAAA,MAAM,CAAC,OAAR,CAAgB,CAAhB,EADF;OAAA,MAAA;eAGE,IAAC,CAAA,OAAD,CAAA,CAAU,CAAC,MAAX,CAAkB,CAAC,CAAC,EAAD,EAAK,CAAL,CAAA,GAAA;iBAAW,EAAE,CAAC,KAAH,CAAS,EAAT,EAAa,CAAb,EAAgB,IAAC,CAAA,OAAD,CAAS,CAAT,CAAhB;QAAX,CAAD,CAAlB,EAA4D,CAAA,CAA5D,EAHF;;IADO;;IAMT,OAAS,CAAC,CAAD,CAAA;AACX,UAAA;MAAI,GAAA,GAAM,EAAE,CAAC,SAAH,CAAa,IAAC,CAAA,OAAD,CAAA,CAAb;MACN,IAAG,CAAH;eAAU,GAAG,CAAC,CAAD,EAAb;OAAA,MAAA;eAAsB,IAAtB;;IAFO;;IAIT,UAAY,CAAC,CAAD,EAAI,CAAJ,CAAA;MACV,IAAG,CAAI,cAAM,IAAC,CAAA,MAAM,CAAC,SAAb,OAAD,CAAP;eAAmC,EAAnC;OAAA,MAAA;eAA2C,CAAA,KAAK,OAAhD;;IADU;;IAGZ,OAAS,CAAA,CAAA;aACP,IAAC,CAAA,OAAD,CAAA,CAAU,CAAC,MAAX,CACE,CAAC,EAAD,EAAK,CAAL,CAAA,GAAA;AACN,YAAA;QAAQ,CAAA,GAAI,OAAO,CAAC,GAAG,CAAC,IAAC,CAAA,OAAD,CAAS,CAAT,CAAD;QACf,IAAG,SAAH;iBAAW,EAAE,CAAC,KAAH,CAAS,EAAT,EAAa,CAAb,EAAgB,IAAC,CAAA,UAAD,CAAY,CAAZ,EAAe,CAAf,CAAhB,EAAX;SAAA,MAAA;iBAAmD,GAAnD;;MAFF,CADF,EAIE,CAAA,CAJF;IADO;;IAQT,OAAS,CAAC,IAAD,EAAO,CAAC,OAAA,GAAU,KAAX,IAAoB,CAAA,CAA3B,CAAA;AACX,UAAA,CAAA,EAAA,GAAA,EAAA;AAAI;MAAA,KAAA,QAAA;;QACE,IAAG,iBAAA,IAAa,CAAC,OAAA,IAAW,CAAI,cAAM,IAAC,CAAA,OAAD,CAAA,GAAL,OAAD,CAAhB,CAAhB;UACE,OAAO,CAAC,GAAG,CAAC,CAAD,CAAX,GAAiB,CAAA,CAAA,CAAG,IAAI,CAAC,CAAD,CAAP,CAAA,EADnB;;MADF;aAGA,IAAC,CAAA,SAAD,CAAA;IAJO;;IAMT,WAAa,CAAC,IAAD,CAAA;MACX,GAAG,CAAC,KAAJ;AAAY,gBAAA,KAAA;AAAA,gBACL,IAAI,CAAC,OADA;mBACa;AADb,gBAEL,IAAI,CAAC,KAFA;mBAEa;AAFb;mBAGQ;AAHR;;aAIZ;IALW;;IAOb,SAAW,CAAA,CAAA;AACb,UAAA,EAAA,EAAA;MAAI,CAAC,EAAD,EAAK,EAAL,CAAA,GAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAb,EAAyB,OAAO,CAAC,GAAG,CAAC,kBAArC;MACX,IAA+B,CAAC,EAAA,IAAO,CAAI,EAAZ,CAAA,IAAmB,CAAC,EAAA,IAAO,EAAP,IAAc,EAAA,KAAQ,EAAvB,CAAlD;QAAA,OAAO,CAAC,GAAG,CAAC,UAAZ,GAAyB,GAAzB;;MACA,IAAyC,EAAA,IAAO,CAAI,EAApD;eAAA,OAAO,CAAC,GAAG,CAAC,kBAAZ,GAAkC,GAAlC;;IAHS;;IAKX,UAAY,CAAC,IAAD,EAAO,IAAP,CAAA;AACd,UAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;MAAI,sDAAoC,CAAE,gBAAtC;AAAA,eAAA;;MACA,GAAG,CAAC,OAAJ,CAAY,CAAA,oBAAA,CAAA,CAAuB,IAAvB,CAAA,CAAA,CAAZ;AACA;QACE,GAAA,GAAQ,IAAI,CAAC,EAAL,CAAA;QACR,GAAA,GAAQ,CAAA,IAAA,CAAA,CAAO,IAAC,CAAA,UAAD,CAAA,CAAa,CAAC,IAAd,CAAmB,KAAnB,CAAP,CAAA,IAAA;QACR,KAAA,GAAQ,CAAC,CAAD,CAAA,GAAA;AACd,cAAA;UAAQ,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,IAAR,CAAa,CAAC,GAAd,CAAkB,QAAA,CAAC,CAAD,CAAA;mBAAO,CAAC,CAAC,IAAF,CAAA;UAAP,CAAlB,CAAkC,CAAC,MAAnC,CAA0C,EAAE,CAAC,QAA7C;UACR,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAN,CAAc,GAAd,CAAA,GAAqB,CAAjC;iBACR,KAAK,CAAC,MAAN,CACE,CAAC,EAAD,EAAK,IAAL,CAAA,GAAA;AACV,gBAAA,CAAA,EAAA;YAAY,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAS,EAAE,CAAC,KAAH,CAAS,IAAT,EAAe,GAAf,EAAoB,CAApB;YACT,CAAA,GAAI,IAAC,CAAA,OAAD,CAAS,CAAT;YACJ,CAAA,GAAI,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,QAAf,CAAwB,CAAC,QAAzB,CAAkC,OAAlC;YACJ,IAAG,CAAH;qBAAU,EAAE,CAAC,KAAH,CAAS,EAAT,EAAa,CAAb,EAAgB,IAAC,CAAA,UAAD,CAAY,CAAZ,EAAe,CAAf,CAAhB,EAAV;aAAA,MAAA;qBAAkD,GAAlD;;UAJF,CADF,EAME,CAAA,CANF;QAHM;QAWR,IAAC,CAAA,OAAD,CAAS,IAAT;eACA,IAAC,CAAA,OAAD,CAAS,KAAA,CAAM,EAAE,CAAC,SAAH,CAAa,CAAA,GAAA,CAAA,CACrB,IADqB,CAAA;;KAAA,CAAA,CAGnB,GAHmB,CAAA;sCAAA,CAAA,CAIc,GAJd,CAAA;;IAAA,CAAb,CAAN,CAAT,EAfF;OAuBA,aAAA;QAAM;QACJ,CAAC,CAAC,OAAF,GAAY,CAAC,CAAC,OAAO,CAAC,KAAV,CAAgB,IAAhB,CAAqB,CAAC,KAAtB,CAAA;QACZ,MAAM,EAFR;;IA1BU;;IA8BZ,OAAS,CAAC,IAAD,EAAO,GAAP,CAAA;AACX,UAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,IAAA,GAAO,OAAA,CAAQ,IAAR,EAAc,GAAd;MACP,IAAA,GAAO,IAAC,CAAA,MAAM,CAAC;AACf;MAAA,KAAA,6CAAA;;QAAA,CAAkB,CAAC,CAAA,GAAI,IAAI,CAAC,CAAD,CAAT,CAAjB,GAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,GAAA,MAAD;MAAA;aACA,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,IAAC,CAAA,OAAD,CAAA,CAAU,CAAC,MAAX,CAAkB,IAAC,CAAA,MAAD,CAAA,CAAlB,CAApB;IAJO,CA9FX;;;;;IAwGE,SAAW,CAAC,OAAO,EAAR,EAAY,QAAQ,IAApB,CAAA;AACb,UAAA;MAAI,SAAA,GAAY,QAAA,CAAC,CAAD,CAAA;4BAAY,MAAL;MAAP;aACZ,IAAC,CAAA,MAAD,GACE;QAAA,KAAA,EAAO,EAAE,CAAC,UAAH,CAAc,IAAC,CAAA,MAAM,CAAC,KAAtB,EAA6B,IAA7B,CAAP;QACA,OAAA,EAAS,IAAC,CAAA,MAAM,CAAC,OAAO,CAAC,KAAhB,CAAA,CAAuB,CAAC,MAAxB,CAA+B,SAA/B,CADT;QAEA,MAAA,EAAQ,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,MAAM,CAAC,MAApB,CAA2B,CAAC,MAA5B,CAAmC,SAAnC,CAFR;QAGA,UAAA,EAAY,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,MAAM,CAAC,UAApB,CAA+B,CAAC,MAAhC,CAAuC,SAAvC,CAHZ;QAIA,OAAA,EAAY,KAAH,GAAc,IAAC,CAAA,MAAM,CAAC,OAAtB,GAAmC,CAAC,QAAA,CAAC,CAAD,CAAA,EAAA,CAAD;MAJ5C;IAHO;;IASX,KAAO,CAAA,CAAA;AACT,UAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA;MAAI,KAAA,GAAU,IAAC,CAAA,MAAM,CAAC;MAClB,IAAA,GAAU,IAAC,CAAA,MAAM,CAAC;MAClB,IAAA,GAAU,IAAC,CAAA,MAAM,CAAC;MAClB,KAAA,GAAU,CAAC,CAAD,CAAA,GAAA;AAAM,YAAA;QAAC,IAAG,CAAC,CAAA,GAAI,IAAC,CAAA,MAAM,CAAC,KAAK,CAAC,CAAD,CAAlB,CAAH;iBAA+B,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,EAAA,EAA/B;SAAA,MAAA;iBAA8C,GAA9C;;MAAP;MACV,OAAA,GAAU,CAAC,CAAD,CAAA,GAAA;eAAO,CAAA,CAAA,CAAA,CAAI,KAAA,CAAM,CAAN,CAAJ,CAAA,EAAA,CAAA,CAAiB,CAAjB,CAAA,CAAA;MAAP;MACV,MAAA,GAAU,CAAC,CAAD,CAAA,GAAA;eAAO,CAAA,CAAA,CAAA,CAAI,KAAA,CAAM,CAAN,CAAJ,CAAA,EAAA,CAAA,CAAiB,CAAjB,CAAA,CAAA,CAAA,CAAsB,IAAC,CAAA,MAAM,CAAC,MAAM,CAAC,CAAD,CAApC,CAAA,CAAA;MAAP;MACV,MAAA,GAAU,CAAC,CAAD,CAAA,GAAA;QAAO,iBAAQ,OAAL,OAAH;iBAAmB,OAAA,CAAQ,CAAR,EAAnB;SAAA,MAAA;iBAAmC,MAAA,CAAO,CAAP,EAAnC;;MAAP;MACV,MAAA,GAAU,CAAC,CAAD,CAAA,GAAA;eAAO,IAAC,CAAA,MAAM,CAAC,UAAU,CAAC,CAAD;MAAzB;aACV,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,CAAC,IAAnB,CAAA,CAAyB,CAAC,GAA1B,CAA8B,MAA9B,CAAqC,CAAC,MAAtC,CAA6C,IAAI,CAAC,GAAL,CAAS,MAAT,CAAgB,CAAC,MAAjB,CAAwB,EAAE,CAAC,QAA3B,CAA7C;IATK;;IAWP,KAAO,CAAC,IAAD,EAAO,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,IAAqB,CAAA,CAA5B,CAAA;AACT,UAAA,GAAA,EAAA,IAAA,EAAA;MAAI,IAAA,GAAO,CAAA,CAAA,GAAA;eAAM,EAAE,CAAC,KAAH,CAAS,IAAC,CAAA,MAAV,EAAkB,SAAlB,EAAgC,KAAH,GAAc,CAAA,CAAd,GAAsB,IAAC,CAAA,OAAD,CAAA,CAAnD;MAAN;MACP,IAAA,GAAO,IAAC,CAAA,WAAD,CAAa,IAAC,CAAA,OAAD,CAAS,IAAT,EAAe,IAAA,CAAA,CAAf,CAAb;MACP,IAAG,CAAC,GAAA,GAAO,IAAI,CAAC,GAAD,CAAJ,IAAa,IAArB,CAAA,IAAgC,EAAE,CAAC,UAAH,CAAc,GAAd,CAAnC;QACE,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,GAAlB;QACA,IAAA,GAAO,IAAC,CAAA,WAAD,CAAa,IAAC,CAAA,OAAD,CAAS,IAAT,EAAe,IAAA,CAAA,CAAf,CAAb,EAFT;;MAGA,IAAC,CAAA,OAAD,CAAS,IAAT,EAAe;QAAC,OAAA,EAAS;MAAV,CAAf;MACA,GAAG,CAAC,OAAJ,CAAY,uBAAZ,EAAqC;QAAC,IAAA,EAAM,OAAA,CAAQ,IAAR,EAAc;UAAC,KAAA,EAAO;QAAR,CAAd;MAAP,CAArC;aACA;IARK;;IAUP,YAAc,CAAC,IAAD,CAAA;AAChB,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAI;AAAA;MAAA,KAAA,6CAAA;;qBACE,EAAE,CAAC,QAAH,CAAY,IAAI,CAAC,CAAD,CAAhB,EAAqB,CAAA,CAAA,CAAG,IAAC,CAAA,MAAM,CAAC,UAAU,CAAC,CAAD,CAAlB,IAAyB,CAA5B,CAAA,kBAAA,CAArB;MADF,CAAA;;IADY;;IAId,WAAa,CAAC,QAAQ,EAAT,CAAA;AACf,UAAA,KAAA,EAAA;MAAI,IAAA,GAAQ,EAAE,CAAC,OAAH,CAAW,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc;QAAC,KAAA,EAAO;MAAR,CAAd,CAAX,CAAuC,CAAC,GAAxC,CAA4C,QAAA,CAAC,CAAD,CAAA;eAAO,CAAA,EAAA,CAAA,CAAK,CAAL,CAAA;MAAP,CAA5C;MACR,KAAA,GAAQ,IAAC,CAAA,OAAD,CAAA,CAAU,CAAC,GAAX,CAAe,QAAA,CAAC,CAAD,CAAA;eAAO,CAAA,EAAA,CAAA,CAAK,CAAL,CAAA;MAAP,CAAf;aACR,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAoB,QAAA,CAAC,CAAD,CAAA;eAAO,CAAI,cAAM,MAAL,OAAD;MAAX,CAApB;IAHW;;EA3If;;EAgJA,MAAM,CAAC,OAAP,GAAiB;AAzJjB",
  "sourcesContent": [
    "fs        = require 'fs'\ngetopts   = require 'getopts'\n{inspect} = require 'util'\npath      = require 'path'\nuuid      = require 'uuid'\nfn        = require './fn'\nlog       = require './log'\nCfnError  = require './CfnError'\n\nclass GetOpts\n  constructor: (@master) ->\n    @fixRegion()\n\n  #\n  # HELPER METHODS\n  #\n\n  allOpts: () ->\n    @config.boolean.concat(@config.string)\n\n  allPos: () ->\n    @config.positional\n\n  allVars: () ->\n    Object.keys(@var2opt())\n\n  configVars: () ->\n    Object.keys(fn.invertObj(fn.selectKeys(@opt2var(), @allOpts())))\n\n  useVars: () ->\n    Object.keys(@var2opt()).reduce(\n      (xs, x) -> if process.env[x]? then xs.concat [x] else xs\n      []\n    )\n\n  opt2var: (x) ->\n    if x\n      @master.opt2var(x)\n    else\n      @allOpts().reduce(((xs, x) => fn.assoc xs, x, @opt2var(x)), {})\n\n  var2opt: (x) ->\n    inv = fn.invertObj @opt2var()\n    if x then inv[x] else inv\n\n  config2opt: (k, v) ->\n    if not (k in @config.boolean) then v else (v is 'true')\n\n  getVars: () ->\n    @allOpts().reduce(\n      (xs, x) =>\n        v = process.env[@opt2var(x)]\n        if v? then fn.assoc(xs, x, @config2opt(x, v)) else xs\n      {}\n    )\n\n  setVars: (opts, {clobber = false} = {}) ->\n    for o, v of @opt2var()\n      if opts[o]? and (clobber or not (v in @useVars()))\n        process.env[v] = \"#{opts[o]}\"\n    @fixRegion()\n\n  setLogLevel: (opts) ->\n    log.level = switch\n      when opts.verbose then 'verbose'\n      when opts.quiet   then 'error'\n      else              'info'\n    opts\n\n  fixRegion: () ->\n    [r1, r2] = [process.env.AWS_REGION, process.env.AWS_DEFAULT_REGION]\n    process.env.AWS_REGION = r2 if (r2 and not r1) or (r1 and r2 and r1 isnt r2)\n    process.env.AWS_DEFAULT_REGION  = r1 if (r1 and not r2)\n\n  loadConfig: (opts, file) ->\n    return unless (vars = @configVars())?.length\n    log.verbose \"using config file: '#{file}'\"\n    try\n      uid   = uuid.v4()\n      pat   = \"^\\\\(#{@configVars().join('\\\\|')}\\\\)$\"\n      parse = (x) =>\n        lines = x.split('\\n').map((x) -> x.trim()).filter(fn.identity)\n        lines = lines.slice(lines.indexOf(uid) + 2)\n        lines.reduce(\n          (xs, line) =>\n            [k, v] = fn.split(line, '=', 2)\n            k = @var2opt(k)\n            v = Buffer.from(v, 'base64').toString('utf-8')\n            if k then fn.assoc(xs, k, @config2opt(k, v)) else xs\n          {}\n        )\n      @setVars opts\n      @setVars parse fn.execShell \"\"\"\n        . '#{file}'\n        echo\n        echo #{uid}\n        for i in $(compgen -A variable |grep '#{pat}'); do\n          echo $i=$(echo -n \"${!i}\" |base64 -w0)\n        done\n      \"\"\"\n    catch e\n      e.message = e.message.split('\\n').shift()\n      throw e\n\n  getopts: (argv, dfl) ->\n    opts = getopts argv, dfl\n    args = @config.positional\n    (opts[k] = arg if (k = args[i])) for arg, i in opts._\n    fn.selectKeys opts, @allOpts().concat(@allPos())\n\n  #\n  # EXTERNAL API\n  #\n\n  configure: (opts = [], abort = true) ->\n    optFilter = (x) -> x in opts\n    @config =\n      alias: fn.selectKeys(@master.alias, opts)\n      boolean: @master.boolean.slice().filter optFilter\n      string: Object.keys(@master.string).filter optFilter\n      positional: Object.keys(@master.positional).filter optFilter\n      unknown: if abort then @master.unknown else ((x) ->)\n\n  usage: () ->\n    bools   = @config.boolean\n    strs    = @config.string\n    args    = @config.positional\n    alias   = (x) => if (y = @config.alias[x]) then \"-#{y}, \" else ''\n    optbool = (x) => \"[#{alias(x)}--#{x}]\"\n    optstr  = (x) => \"[#{alias(x)}--#{x}=#{@master.string[x]}]\"\n    optarg  = (x) => if x in bools then optbool(x) else optstr(x)\n    optpos  = (x) => @master.positional[x]\n    bools.concat(strs).sort().map(optarg).concat(args.map(optpos).filter(fn.identity))\n\n  parse: (argv, {key, file, noenv} = {}) ->\n    conf = () => fn.assoc @config, 'default', if noenv then {} else @getVars()\n    opts = @setLogLevel @getopts argv, conf()\n    if (cfg = (opts[key] or file)) and fs.existsSync(cfg)\n      @loadConfig(opts, cfg)\n      opts = @setLogLevel @getopts argv, conf()\n    @setVars opts, {clobber: true}\n    log.verbose \"configuration options\", {body: inspect opts, {depth: null}}\n    opts\n\n  validateArgs: (opts) ->\n    for k, i in @config.positional\n      fn.assertOk opts[k], \"#{@master.positional[k] or k} argument required\"\n\n  completeOpt: (words = []) ->\n    used  = fn.objKeys(@parse words, {noenv: true}).map((x) -> \"--#{x}\")\n    longs = @allOpts().map((x) -> \"--#{x}\")\n    longs.sort().filter((x) -> not (x in used))\n\nmodule.exports = GetOpts\n"
  ]
}