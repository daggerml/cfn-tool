{
  "version": 3,
  "file": "log.js",
  "sourceRoot": "..",
  "sources": [
    "lib/log.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "{ createLogger }  = winston = require 'winston'\n{ stderr }        = require 'chalk'\n{ MESSAGE }       = require 'triple-beam'\n{ basename }      = require 'path'\n\nclass Logger\n  constructor: ->\n    levels =\n      console:  0\n      error:    0\n      warn:     1\n      info:     2\n      verbose:  3\n      spawn:    4\n\n    format = (\n      winston.format (info, opts) =>\n        colors =\n          error:    stderr.red\n          warn:     stderr.yellow\n          info:     stderr\n          verbose:  stderr\n\n        if not (info.level in ['console', 'spawn'])\n          color         = colors[info.level]\n          verbose       = levels[@logger.level] > levels.info or\n                          levels[info.level] < levels.info\n          lines         = info.message.split('\\n').map((x) -> x.trimRight()).filter((x) -> x)\n          message1      = color.bold(\"#{@PROG}: #{lines.shift()}\")\n          message2      = color(lines.join('\\n')) if lines.length\n          body          = stderr.dim(info.body) if info.body and verbose\n          info[MESSAGE] = [message1, message2, body].filter((x) -> x).join('\\n')\n        else\n          info[MESSAGE] = info.message\n\n        @SIDE_EFFECTS?.push(info)\n        info\n    )()\n\n    transports = [\n      new winston.transports.Console(\n        stderrLevels: [\n          'error'\n          'warn'\n          'info'\n          'verbose'\n        ]\n      )\n    ]\n\n    @PROG         = basename(process.argv[1] or 'repl')\n    @SIDE_EFFECTS = null\n    @logger       = createLogger { levels, format, transports }\n\n  level: (x) ->\n    @logger.level = x unless @logger.level is 'console'\n\n  silence: (enable) ->\n    (x.silent = !!enable) for x in @logger.transports\n    @SIDE_EFFECTS = if enable then (@SIDE_EFFECTS or []) else null\n\n  sideEffects: -> @SIDE_EFFECTS\n\n  console:  (xs...) -> if xs?[0] then @logger.console.apply(@logger, xs)\n  error:    (xs...) -> if xs?[0] then @logger.error.apply(@logger, xs)\n  warn:     (xs...) -> if xs?[0] then @logger.warn.apply(@logger, xs)\n  info:     (xs...) -> if xs?[0] then @logger.info.apply(@logger, xs)\n  verbose:  (xs...) -> if xs?[0] then @logger.verbose.apply(@logger, xs)\n  spawn:    (xs...) -> if xs?[0] then @logger.spawn.apply(@logger, xs)\n\nmodule.exports = new Logger()\n"
  ]
}