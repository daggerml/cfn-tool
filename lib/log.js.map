{
  "version": 3,
  "file": "log.js",
  "sourceRoot": "..",
  "sources": [
    "lib/log.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA,YAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA;;EAAA,CAAA,CAAE,YAAF,EAAgB,MAAhB,EAAwB,UAAxB,CAAA,GAAwC,OAAA,CAAQ,SAAR,CAAxC;;EACA,CAAA,CAAE,MAAF,CAAA,GAAwC,OAAA,CAAQ,OAAR,CAAxC;;EACA,CAAA,CAAE,OAAF,CAAA,GAAwC,OAAA,CAAQ,aAAR,CAAxC;;EACA,CAAA,CAAE,QAAF,CAAA,GAAwC,OAAA,CAAQ,MAAR,CAAxC;;EACA,IAAA,GAAwC,QAAA,CAAS,OAAO,CAAC,IAAI,CAAC,CAAD,CAAZ,IAAmB,MAA5B;;EAExC,MAAA,GACE;IAAA,KAAA,EAAU,MAAM,CAAC,GAAjB;IACA,IAAA,EAAU,MAAM,CAAC,MADjB;IAEA,IAAA,EAAU,MAFV;IAGA,IAAA,EAAU,MAHV;IAIA,OAAA,EAAU,MAJV;IAKA,KAAA,EAAU,MALV;IAMA,KAAA,EAAU;EANV;;EAQF,QAAA,GACE;IAAA,KAAA,EAAU,CAAV;IACA,IAAA,EAAU,CADV;IAEA,IAAA,EAAU,CAFV;IAGA,IAAA,EAAU,CAHV;IAIA,OAAA,EAAU,CAJV;IAKA,KAAA,EAAU,CALV;IAMA,KAAA,EAAU;EANV;;EAQF,MAAA,GAAS,CACP,MAAA,CAAO,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACT,QAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA;IAAI,KAAA,GAAgB,MAAM,CAAC,IAAI,CAAC,KAAN;IACtB,OAAA,GAAgB,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,KAAhB,CAAR,GAAiC,QAAQ,CAAC,IAA1C,IACA,QAAQ,CAAC,IAAI,CAAC,KAAN,CAAR,GAAuB,QAAQ,CAAC;IAChD,KAAA,GAAgB,IAAI,CAAC,OAAO,CAAC,KAAb,CAAmB,IAAnB,CAAwB,CAAC,GAAzB,CAA6B,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,SAAF,CAAA;IAAP,CAA7B,CAAkD,CAAC,MAAnD,CAA0D,QAAA,CAAC,CAAD,CAAA;aAAO;IAAP,CAA1D;IAChB,QAAA,GAAgB,KAAK,CAAC,IAAN,CAAW,CAAA,CAAA,CAAG,IAAH,CAAA,EAAA,CAAA,CAAY,KAAK,CAAC,KAAN,CAAA,CAAZ,CAAA,CAAX;IAChB,IAA2C,KAAK,CAAC,MAAjD;MAAA,QAAA,GAAgB,KAAA,CAAM,KAAK,CAAC,IAAN,CAAW,IAAX,CAAN,EAAhB;;IACA,IAAyC,IAAI,CAAC,IAAL,IAAc,OAAvD;MAAA,IAAA,GAAgB,MAAM,CAAC,GAAP,CAAW,IAAI,CAAC,IAAhB,EAAhB;;IACA,IAAI,CAAC,OAAD,CAAJ,GAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,CAA0B,CAAC,MAA3B,CAAkC,QAAA,CAAC,CAAD,CAAA;aAAO;IAAP,CAAlC,CAA2C,CAAC,IAA5C,CAAiD,IAAjD;WAChB;EATK,CAAP,CADO,CAAA,CAAA;;EAaT,UAAA,GAAa;IACX,IAAI,UAAU,CAAC,OAAf,CACE;MAAA,YAAA,EAAc,CACZ,OADY;IAEZ,MAFY;IAGZ,MAHY;IAIZ,MAJY;IAKZ,SALY;IAMZ,OANY;IAOZ,OAPY;IAAd,CADF,CADW;;;EAcb,MAAM,CAAC,OAAP,GAAiB,YAAA,CAAa,CAAE,MAAF,EAAU,UAAV,CAAb;AAnDjB",
  "sourcesContent": [
    "{ createLogger, format, transports }  = require 'winston'\n{ stderr }                            = require 'chalk'\n{ MESSAGE }                           = require 'triple-beam'\n{ basename }                          = require 'path'\nprog                                  = basename(process.argv[1] or 'repl')\n\ncolors =\n  error:    stderr.red\n  warn:     stderr.yellow\n  info:     stderr\n  http:     stderr\n  verbose:  stderr\n  debug:    stderr\n  silly:    stderr\n\npriority =\n  error:    0\n  warn:     1\n  info:     2\n  http:     3\n  verbose:  4\n  debug:    5\n  silly:    6\n\nformat = (\n  format (info, opts) ->\n    color         = colors[info.level]\n    verbose       = priority[module.exports.level] > priority.info or\n                    priority[info.level] < priority.info\n    lines         = info.message.split('\\n').map((x) -> x.trimRight()).filter((x) -> x)\n    message1      = color.bold(\"#{prog}: #{lines.shift()}\")\n    message2      = color(lines.join('\\n')) if lines.length\n    body          = stderr.dim(info.body) if info.body and verbose\n    info[MESSAGE] = [message1, message2, body].filter((x) -> x).join('\\n')\n    info\n)()\n\ntransports = [\n  new transports.Console(\n    stderrLevels: [\n      'error'\n      'warn'\n      'info'\n      'http'\n      'verbose'\n      'debug'\n      'silly'\n    ]\n  )\n]\n\nmodule.exports = createLogger { format, transports }\n"
  ]
}