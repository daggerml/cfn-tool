{
  "version": 3,
  "file": "cfn-transformer.js",
  "sourceRoot": "..",
  "sources": [
    "lib/cfn-transformer.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,QAAA,EAAA,cAAA,EAAA,aAAA,EAAA,eAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,cAAA,EAAA,OAAA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,YAAA,EAAA,QAAA,EAAA,EAAA,EAAA,WAAA,EAAA,YAAA,EAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,0BAAA,EAAA,MAAA,EAAA,IAAA;IAAA;;EAAA,IAAA,GAAkB,OAAA,CAAQ,SAAR;;EAClB,EAAA,GAAkB,OAAA,CAAQ,IAAR;;EAClB,EAAA,GAAkB,OAAA,CAAQ,IAAR;;EAClB,IAAA,GAAkB,OAAA,CAAQ,MAAR;;EAClB,MAAA,GAAkB,OAAA,CAAQ,QAAR;;EAClB,MAAA,GAAkB,OAAA,CAAQ,QAAR;;EAClB,CAAA,CAAC,SAAD,CAAA,GAAkB,OAAA,CAAQ,eAAR,CAAlB;;EACA,GAAA,GAAkB,OAAA,CAAQ,OAAR;;EAClB,QAAA,GAAkB,OAAA,CAAQ,YAAR;;EAClB,eAAA,GAAkB,OAAA,CAAQ,oBAAR;;EAClB,CAAA,CAAC,aAAD,CAAA,GAAkB,OAAA,CAAQ,mDAAR,CAAlB,EAVA;;;;;EAgBA,GAAA,GAAM,QAAA,CAAC,CAAD,CAAA;IACJ,OAAO,CAAC,GAAR,CAAY,OAAA,CAAQ,MAAR,CAAe,CAAC,OAAhB,CAAwB;MAAC,GAAA,EAAK;IAAN,CAAxB,EAAkC;MAAC,KAAA,EAAO;IAAR,CAAlC,CAAZ;WACA;EAFI;;EAIN,0BAAA,GAA6B,CAC3B,MAD2B,EAE3B,WAF2B,EAG3B,gBAH2B,EAI3B,gBAJ2B,EAK3B,WAL2B,EAM3B,UAN2B,EAO3B,cAP2B,EAQ3B,qBAR2B;;EAW7B,QAAA,GAAW,QAAA,CAAC,CAAD,CAAA;WAAO;EAAP;;EAEX,KAAA,GAAQ,QAAA,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAA;IACN,EAAE,CAAC,CAAD,CAAF,GAAQ;WACR;EAFM;;EAIR,IAAA,GAAO,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;IACL,EAAE,CAAC,IAAH,CAAQ,CAAR;WACA;EAFK;;EAIP,QAAA,GAAW,QAAA,CAAC,IAAD,CAAA;WACT,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAqB,CAAC,QAAtB,CAA+B,OAA/B;EADS;;EAGX,MAAA,GAAS,QAAA,CAAC,KAAD,CAAA;WACP,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,KAAtB,CAA4B;EADrB;;EAGT,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;AACV,QAAA;IAAE,IAAG,mDAAH;aAAqD,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,EAArD;;EADQ;;EAGV,KAAA,GAAQ,QAAA,CAAA,GAAC,IAAD,CAAA;WACN,MAAM,CAAC,MAAM,CAAC,KAAd,CAAoB,IAApB,EAA0B,IAA1B;EADM;;EAGR,SAAA,GAAY,QAAA,CAAA,GAAC,IAAD,CAAA;AACZ,QAAA;IAAE,EAAA,GAAK,QAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;AACP,UAAA,CAAA,EAAA,GAAA,EAAA;MAAI,IAAG,CAAI,CAAC,QAAA,CAAS,CAAT,CAAA,IAAgB,QAAA,CAAS,CAAT,CAAjB,CAAP;eACE,EADF;OAAA,MAAA;QAGE,GAAA,GAAM,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,CAAlB;QACN,KAAA,MAAA;;UAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAA,CAAG,CAAC,CAAC,CAAD,CAAJ,EAAS,CAAT;QAAT;eACA,IALF;;IADG;WAOL,IAAI,CAAC,MAAL,CAAY,CAAC,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;aAAW,EAAA,CAAG,EAAH,EAAO,CAAP;IAAX,CAAD,CAAZ,EAAoC,CAAA,CAApC;EARU;;EAUZ,OAAA,GAAU,QAAA,CAAA,GAAC,IAAD,CAAA;AACV,QAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA;IAAE,GAAA,GAAM,CAAA;IACN,KAAsC,+FAAtC;MAAA,GAAG,CAAC,IAAI,CAAC,CAAA,GAAE,CAAH,CAAL,CAAH,GAAiB,IAAI,CAAC,CAAA,GAAE,CAAF,GAAI,CAAL;IAArB;WACA;EAHQ;;EAKV,WAAA,GAAc,QAAA,CAAC,IAAD,CAAA;WACZ,EAAE,CAAC,QAAH,CAAY,IAAZ,CAAiB,CAAC,WAAlB,CAAA;EADY;;EAGd,QAAA,GAAW,QAAA,CAAC,GAAD,EAAM,CAAN,CAAA;WACT,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAgB,CAAC,MAAjB,CAAwB,CAAC,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;aAAW,CAAA,CAAE,EAAF,EAAM,CAAN,EAAS,GAAG,CAAC,CAAD,CAAZ;IAAX,CAAD,CAAxB,EAAuD,CAAA,CAAvD;EADS;;EAGX,QAAA,GAAW,QAAA,CAAC,GAAD,CAAA;WACT,MAAM,CAAC,IAAP,CAAY,GAAA,IAAO,CAAA,CAAnB,CAAsB,CAAC,MAAvB,GAAgC;EADvB;;EAGX,GAAA,GAAM,QAAA,CAAC,IAAD,CAAA;WACJ,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAwB,CAAC,MAAzB,CAAgC,IAAhC,CAAqC,CAAC,MAAtC,CAA6C,KAA7C;EADI;;EAGN,OAAA,GAAU,QAAA,CAAC,QAAD,CAAA;WACR,GAAA,CAAI,EAAE,CAAC,YAAH,CAAgB,QAAhB,CAAJ;EADQ;;EAGV,MAAA,GAAS,QAAA,CAAC,OAAD,CAAA;AACT,QAAA,QAAA,EAAA;IAAE,OAAA,GAAU,OAAO,CAAC,GAAR,CAAA;AACV;MACE,OAAO,CAAC,KAAR,CAAc,OAAd;MACA,QAAA,GAAW,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;eAAgB,KAAA,CAAM,IAAN,EAAY,IAAZ,EAAkB,OAAA,CAAQ,IAAR,CAAlB;MAAhB;aACX,GAAA,CAAI,IAAI,CAAC,SAAL,CAAe,EAAE,CAAC,WAAH,CAAe,GAAf,CAAmB,CAAC,IAApB,CAAA,CAA0B,CAAC,MAA3B,CAAkC,QAAlC,EAA4C,CAAA,CAA5C,CAAf,CAAJ,EAHF;KAAA;MAKE,OAAO,CAAC,KAAR,CAAc,OAAd,EALF;;EAFO;;EAST,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;WACR,CAAI,WAAA,CAAY,IAAZ,CAAH,GAA0B,MAA1B,GAAsC,OAAvC,CAAA,CAAgD,IAAhD;EADQ;;EAGV,IAAA,GAAO,QAAA,CAAC,GAAD,CAAA;WAAS,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd;EAAZ;;EAEP,KAAA,GAAQ,QAAA,CAAC,GAAD,EAAM,EAAN,CAAA;WAAa,EAAE,CAAC,MAAH,CAAU,CAAC,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;aAAW,EAAE,CAAC,CAAD;IAAb,CAAD,CAAV,EAA8B,GAA9B;EAAb;;EAER,KAAA,GAAQ,QAAA,CAAC,GAAD,EAAM,GAAN,EAAW,QAAM,KAAjB,CAAA;AACR,QAAA,CAAA,EAAA;IAAE,IAAA,GAAQ,GAAG,CAAC,KAAJ,CAAU,GAAV;IACR,CAAA,GAAQ,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,MAAd,EAAsB,KAAtB,CAAA,GAA+B;WACvC,IAAI,YAAO,CAAC,MAAZ,CAAmB,IAAI,SAAK,CAAC,IAAV,CAAe,GAAf,CAAnB;EAHM;;EAKR,QAAA,GAAY,QAAA,CAAC,CAAD,CAAA;WAAO,MAAA,CAAO,CAAP,CAAA,KAAa;EAApB;;EACZ,OAAA,GAAY,QAAA,CAAC,CAAD,CAAA;WAAO,MAAA,CAAO,CAAP,CAAA,KAAa;EAApB;;EACZ,QAAA,GAAY,QAAA,CAAC,CAAD,CAAA;WAAO,MAAA,CAAO,CAAP,CAAA,KAAa;EAApB;;EACZ,SAAA,GAAY,QAAA,CAAC,CAAD,CAAA;WAAO,MAAA,CAAO,CAAP,CAAA,KAAa;EAApB;;EAEZ,YAAA,GAAe,QAAA,CAAC,KAAD,CAAA;AACf,QAAA;IAAE,MAAM,CAAC,EAAP,SAAU,MAAA,CAAO,KAAP,OACR,YADQ,SAER,eAFQ,SAGR,MAHF,EAIG,CAAA,wBAAA,CAAA,CAA2B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA3B,CAAA,CAJH;WAKA;EANa;;EAQf,WAAA,GAAc,QAAA,CAAC,KAAD,CAAA;IACZ,MAAM,CAAC,EAAP,CAAU,OAAA,CAAQ,KAAR,CAAV,EAA0B,CAAA,uBAAA,CAAA,CAA0B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA1B,CAAA,CAA1B;WACA;EAFY;;EAId,WAAA,GAAc,QAAA,CAAC,GAAD,CAAA;AACd,QAAA;IAAE,IAAG,CAAC,KAAA,GAAQ,GAAG,CAAC,KAAJ,CAAU,YAAV,CAAT,CAAH;aAA0C,KAAK,CAAC,CAAD,CAAG,CAAC,KAAT,CAAe,GAAf,EAA1C;KAAA,MAAA;aAAmE,IAAnE;;EADY;;EAGd,YAAA,GAAe,QAAA,CAAC,IAAD,CAAA;WACb,IAAI,CAAC,MAAL,CAAY,CAAC,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;AACf,UAAA,CAAA,EAAA;MAAI,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,GAAR;;QACT,IAAK;;aACL,KAAA,CAAM,EAAN,EAAU,OAAA,CAAQ,CAAR,EAAW,WAAA,CAAY,CAAZ,CAAX,CAAV;IAHW,CAAD,CAAZ,EAIG,CAAA,CAJH;EADa;;EAOf,YAAA,GAAe,QAAA,CAAC,IAAD,EAAO,MAAM,EAAb,CAAA;AACf,QAAA;IAAE,OAAA,GAAU,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;AACZ,UAAA;MAAI,KAAkB,QAAA,CAAS,CAAT,CAAlB;QAAA,CAAA,GAAI,CAAA,CAAA,CAAG,CAAH,CAAA,EAAJ;;MACA,CAAA,GAAI,EAAE,CAAC,GAAH,CAAA;aACJ,EAAE,CAAC,MAAH,CAAa,QAAA,CAAS,CAAT,CAAA,IAAgB,QAAA,CAAS,CAAT,CAAnB,GAAoC,CAAC,CAAC,CAAD,EAAG,CAAH,CAAK,CAAC,IAAN,CAAW,GAAX,CAAD,CAApC,GAA2D,CAAC,CAAD,EAAG,CAAH,CAArE;IAHQ;WAIV,IAAI,CAAC,MAAL,CAAY,OAAZ,EAAqB,EAArB,CAAwB,CAAC,MAAzB,CAAgC,QAAA,CAAC,CAAD,CAAA;aAAO,WAAA,IAAO,CAAA,KAAO;IAArB,CAAhC;EALa;;EAOf,YAAA,GAAe,QAAA,CAAC,CAAD,EAAI,MAAJ,CAAA;IACb,MAAmB,CAAA,IAAM,QAAA,CAAS,CAAT,EAAzB;AAAA,aAAO,KAAP;;WACA,CAAC,CAAC,KAAF,CAAQ,IAAR,CACE,CAAC,GADH,CACO,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,SAAF,CAAA;IAAP,CADP,CAEE,CAAC,MAFH,CAEU,QAFV,CAGE,CAAC,GAHH,CAGO,QAAA,CAAC,CAAD,CAAA;aAAO,CAAA,CAAA,CAAG,MAAH,CAAA,EAAA,CAAA,CAAc,CAAd,CAAA;IAAP,CAHP,CAIE,CAAC,IAJH,CAIQ,IAJR;EAFa;;EAQf,mBAAA,GAAsB,QAAA,CAAC,IAAD,CAAA;AACtB,QAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAE,KAAA,GAAQ;IACR,KAAS,2FAAT;AACE,cAAO,IAAI,CAAC,CAAD,CAAX;AAAA,aACO,GADP;UACgB,KAAA;AAAT;AADP,aAEO,GAFP;UAEgB,IAAY,CAAI,KAAA,EAAhB;AAAA,mBAAO,EAAP;;AAFhB;IADF;AAIA,WAAO,CAAC;EANY;;EAQtB,cAAA,GAAiB,QAAA,CAAC,IAAD,CAAA;AACjB,QAAA,CAAA,EAAA;IAAE,GAAA,GAAM;AACN,WAAM,IAAN;MACE,IAAG,IAAI,CAAC,UAAL,CAAgB,KAAhB,CAAH;QACE,GAAG,CAAC,IAAJ,CAAS,IAAI,YAAb;QACA,IAAA,GAAO,IAAI,UAFb;OAAA,MAGK,IAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAH;QACH,CAAA,GAAI,mBAAA,CAAoB,IAAI,SAAxB;QACJ,MAAM,CAAC,QAAP,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuB,CAAA,kBAAA,CAAA,CAAqB,IAAI,CAAC,SAAL,CAAe,IAAf,CAArB,CAAA,CAAvB;QACA,GAAG,CAAC,IAAJ,CAAS;UAAC,GAAA,EAAK,IAAI;QAAV,CAAT;QACA,IAAA,GAAO,IAAI,cAJR;OAAA,MAAA;QAMH,IAAG,CAAC,CAAA,GAAI,IAAI,CAAC,OAAL,CAAa,IAAb,CAAL,CAAA,KAA4B,CAAC,CAAhC;UACE,GAAG,CAAC,IAAJ,CAAS,IAAT;AACA,gBAFF;SAAA,MAAA;UAIE,GAAG,CAAC,IAAJ,CAAS,IAAI,YAAb;UACA,IAAA,GAAO,IAAI,UALb;SANG;;IAJP;WAgBA;EAlBe;;EAoBjB,IAAA,GAAO,QAAA,CAAC,IAAE,EAAH,CAAA;AACP,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA;IAAE,KAAA,GAAQ;AACR;IAAA,KAAA,sCAAA;;MACE,IAAG,CAAC,CAAC,CAAD,CAAD,KAAQ,IAAX;QAAqB,CAAA,GAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAzB;OAAA,MAAA;QAAyC,KAAK,CAAC,GAAN,CAAA,EAAzC;;AACA;MAAA,KAAA,wCAAA;;QAAA,KAAK,CAAC,IAAN,CAAW,CAAX;MAAA;IAFF;WAGA,KAAK,CAAC,IAAN,CAAW,IAAX;EALK,EA9KP;;;;;EAyLM,iBAAN,MAAA,eAAA,QAA6B,gBAA7B;IACE,WAAa,CAAC;eAAA;aAAA;QAAoB;MAApB,IAA4B,CAAA,CAA7B,CAAA;AACf,UAAA;;MADiB,IAAC,CAAA;MAAS,IAAC,CAAA;MAAO,IAAC,CAAA;;QAGhC,IAAC,CAAA,OAAkB,CAAA;;;YACd,CAAC,WAAa;;;QACnB,IAAC,CAAA,QAAkB,CAAA;;;QACnB,IAAC,CAAA,UAAkB,OAAO,CAAC,GAAR,CAAA;;MACnB,IAAC,CAAA,QAAD,GAAkB;MAClB,IAAC,CAAA,UAAD,GAAkB;MAClB,IAAC,CAAA,cAAD,GAAkB;MAClB,IAAC,CAAA,SAAD,GAAkB;MAClB,IAAC,CAAA,MAAD,GAAkB,GAVtB;;;;MAgBI,IAAC,CAAA,QAAD,CAAU,QAAV,EAAoB,CAAC,IAAD,CAAA,GAAA;QAClB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,YAAA,EAAc;QAAf;MAFkB,CAApB;MAIA,IAAC,CAAA,QAAD,CAAU,QAAV,EAAoB,CAAC,IAAD,CAAA,GAAA;QAClB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,YAAA,EAAc;QAAf;MAFkB,CAApB;MAIA,IAAC,CAAA,QAAD,CAAU,aAAV,EAAyB,CAAC,IAAD,CAAA,GAAA;QACvB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,iBAAA,EAAmB;QAApB;MAFuB,CAAzB;MAIA,IAAC,CAAA,QAAD,CAAU,QAAV,EAAoB,CAAC,IAAD,CAAA,GAAA;QAClB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAA,IAAkB,IAAI,CAAC,MAAL,KAAe,CAApC,GAA2C,IAAI,CAAC,CAAD,CAA/C,GAAwD;eAC/D;UAAC,YAAA,EAAiB,QAAA,CAAS,IAAT,CAAH,GAAuB,KAAA,CAAM,IAAN,EAAY,GAAZ,EAAiB,CAAjB,CAAvB,GAAgD;QAA/D;MAFkB,CAApB;MAIA,IAAC,CAAA,QAAD,CAAU,QAAV,EAAoB,CAAC,IAAD,CAAA,GAAA;QAClB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,YAAA,EAAc;QAAf;MAFkB,CAApB;MAIA,IAAC,CAAA,QAAD,CAAU,MAAV,EAAkB,CAAC,IAAD,CAAA,GAAA;AACtB,YAAA,GAAA,EAAA,IAAA,EAAA;QAAM,CAAC,GAAD,EAAM,IAAN,CAAA,GAAc;AACd,gBAAO,CAAC,EAAA,GAAK,YAAA,CAAa,IAAb,EAAmB,GAAnB,CAAN,CAA8B,CAAC,MAAtC;AAAA,eACO,CADP;mBACc;AADd,eAEO,CAFP;mBAEc,EAAE,CAAC,CAAD;AAFhB;mBAGO;cAAC,UAAA,EAAY,CAAC,GAAD,EAAM,EAAN;YAAb;AAHP;MAFgB,CAAlB;MAOA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,WAAvB,EAAoC,CAAC,IAAD,CAAA,GAAA;eAClC;UAAC,SAAA,EAAc,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;QAA/C;MADkC,CAApC;MAGA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,KAAjB,EAAwB,CAAC,IAAD,CAAA,GAAA;AAC5B,YAAA,EAAA,EAAA;QAAM,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;QAC1C,IAAG,QAAA,CAAS,IAAT,CAAH;UACE,CAAC,GAAD,EAAM,GAAA,EAAN,CAAA,GAAe,IAAI,CAAC,KAAL,CAAW,GAAX;AACf,kBAAA,KAAA;AAAA,kBACO,IAAI,CAAC,UAAL,CAAgB,GAAhB,CADP;qBACqC;gBAAC,SAAA,EAAW,IAAI;cAAhB;AADrC,kBAEO,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAFP;qBAEqC;gBAAC,SAAA,EAAW,IAAI;cAAhB;AAFrC,kBAGO,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAHP;qBAGqC;gBAAC,UAAA,EAAY,IAAI;cAAjB;AAHrC,iBAIO,iCAJP;qBAIqC,KAAA,CAAM,IAAC,CAAA,IAAD,CAAM,IAAA,CAAK,IAAC,CAAA,SAAN,CAAgB,CAAC,GAAD,CAAtB,CAAN,EAAoC,EAApC;AAJrC;qBAKO;gBAAC,GAAA,EAAK;cAAN;AALP,WAFF;SAAA,MAAA;iBAQK,KARL;;MAFsB,CAAxB;MAYA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAC,IAAD,CAAA,GAAA;QACf,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAA,IAAkB,IAAI,CAAC,MAAL,KAAe,CAApC,GAA2C,IAAI,CAAC,CAAD,CAA/C,GAAwD;AAC/D,gBAAO,MAAA,CAAO,IAAP,CAAP;AAAA,eACO,QADP;mBACqB;cAAC,UAAA,EAAY,CAAC,EAAD,EAAK,cAAA,CAAe,IAAf,CAAL;YAAb;AADrB;mBAEO;cAAC,SAAA,EAAW;YAAZ;AAFP;MAFe,CAAjB,EA1DJ;;;;MAoEI,IAAC,CAAA,UAAD,CAAY,KAAZ,EAAmB,CAAC,IAAD,CAAA,GAAA;QACjB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAA,IAAkB,IAAI,CAAC,MAAL,KAAe,CAApC,GAA2C,IAAI,CAAC,CAAD,CAA/C,GAAwD;QAC/D,IAAG,OAAA,CAAQ,IAAR,CAAH;iBACE,IAAC,CAAA,YAAD,CAAc,IAAC,CAAA,IAAD,CAAM,IAAI,CAAC,CAAD,CAAV,CAAd,EAA8B,CAAA,CAAA,GAAA;mBAAG,IAAC,CAAA,IAAD,CAAM,IAAI,CAAC,CAAD,CAAV;UAAH,CAA9B,EADF;SAAA,MAAA;UAGE,KAAA,CAAM,IAAA,CAAK,IAAC,CAAA,SAAN,CAAN,EAAwB,YAAA,CAAa,IAAC,CAAA,IAAD,CAAM,IAAN,CAAb,CAAxB;iBACA,KAJF;;MAFiB,CAAnB;MAQA,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,CAAC,IAAD,CAAA,GAAA;eAChB,WAAA,CAAY,IAAZ,CAAiB,CAAC,MAAlB,CAAyB,CAAC,CAAC,EAAD,EAAK,CAAL,CAAA,GAAA;iBAAW,IAAC,CAAA,IAAD,CAAM,CAAN;QAAX,CAAD,CAAzB,EAAgD,IAAhD;MADgB,CAAlB,EA5EJ;;;;MAmFI,IAAC,CAAA,QAAD,CAAU,SAAV,EAAqB,CAAC,IAAD,CAAA,GAAA;AACzB,YAAA,CAAA,EAAA,GAAA,EAAA;QAAM,KAAqB,OAAA,CAAQ,IAAR,CAArB;UAAA,IAAA,GAAO,CAAC,IAAD,EAAP;;QACA,KAAA,sCAAA;;UAAA,OAAA,CAAQ,IAAI,CAAC,OAAL,CAAa,CAAb,CAAR,CAAA,CAAyB,IAAzB;QAAA;eACA;MAHmB,CAArB;MAKA,IAAC,CAAA,QAAD,CAAU,YAAV,EAAwB,CAAC,IAAD,CAAA,GAAA;eACtB;UAAA,UAAA,EAAY,IAAI,CAAC,MAAL,CAAY,CAAC,CAAC,EAAD,EAAK,KAAL,CAAA,GAAA;AAC/B,gBAAA,IAAA,EAAA;YAAQ,CAAC,IAAD,EAAO,GAAA,IAAP,CAAA,GAAkB,KAAK,CAAC,KAAN,CAAY,IAAZ;YAClB,IAAA,GAAO,KAAA,CAAM;cAAC,IAAA,EAAM;YAAP,CAAN,EAAwB,YAAA,CAAa,IAAb,CAAxB;mBACP,KAAA,CAAM,EAAN,EAAU,OAAA,CAAQ,IAAR,EAAc,IAAd,CAAV;UAHuB,CAAD,CAAZ,EAIT,CAAA,CAJS;QAAZ;MADsB,CAAxB;MAOA,IAAC,CAAA,QAAD,CAAU,QAAV,EAAoB,CAAC,IAAD,CAAA,GAAA;eAClB;UAAA,OAAA,EAAS,QAAA,CAAS,IAAT,EAAe,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAA,GAAA;AAC9B,gBAAA,IAAA,EAAA,IAAA,EAAA;YAAQ,CAAC,IAAD,EAAO,GAAA,IAAP,CAAA,GAAkB,CAAC,CAAC,KAAF,CAAQ,IAAR;YAClB,KAAA,GAAW,QAAA,CAAS,IAAA,GAAO,YAAA,CAAa,IAAb,CAAhB,CAAH,GAChB,CAAsD,IAAI,CAAC,IAAjD,GAAA,IAAI,CAAC,IAAL,GAAY,IAAC,CAAA,IAAD,CAAM;cAAC,SAAA,EAAW,IAAI,CAAC;YAAjB,CAAN,CAAZ,GAAA,MAAV,EACU;cAAC,MAAA,EAAQ;YAAT,CADV,CADgB,GAAA;mBAGR,KAAA,CAAM,EAAN,EAAU,OAAA,CAAQ,IAAR,EAAc,KAAA,CAAM;cAAC,KAAA,EAAO;YAAR,CAAN,EAAkB,KAAlB,CAAd,CAAV;UALsB,CAAf;QAAT;MADkB,CAApB;MAQA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,CAAC,IAAD,CAAA,GAAA;AAC3B,YAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA;QAAM,GAAA,GAAM,CAAA;QACN,KAAA,UAAA;;UACE,CAAC,EAAD,EAAK,IAAL,EAAW,GAAA,IAAX,CAAA,GAAsB,EAAE,CAAC,KAAH,CAAS,IAAT;UACtB,EAAA,GAAK,IAAC,CAAA,IAAD,CAAM;YAAC,SAAA,EAAW;UAAZ,CAAN;UACL,GAAG,CAAC,EAAD,CAAH,GAAa,CAAI,IAAP,GACL,CAAC,CAAA,GAAI,IAAC,CAAA,cAAc,CAAC,IAAI,CAAC,IAAN,CAApB,CAAH,GAAyC,CAAA,CAAE,IAAF,CAAzC,GAAsD,IAD9C,GAGlB,CAAU,IAAA,GAAO,KAAA,CAAM,CAAC,IAAD,CAAN,EAAc,YAAA,CAAa,IAAb,CAAd,EAAkC;YAAC,UAAA,EAAY;UAAb,CAAlC,CAAjB,EACa,CAAC,CAAA,GAAI,IAAC,CAAA,cAAc,CAAC,IAAD,CAApB,CAAH,GAAoC,CAAA,CAAE,IAAF,CAApC,GAAiD,IAD3D;QANM;eAQA;UAAA,SAAA,EAAW;QAAX;MAVqB,CAAvB;MAYA,IAAC,CAAA,QAAD,CAAU,MAAV,EAAkB,CAAC,IAAD,CAAA,GAAA;QAChB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,YAAA,EAAc,KAAA,CAAM,IAAN,EAAY,GAAZ,EAAiB,CAAjB,CAAmB,CAAC,GAApB,CAAwB,CAAC,CAAD,CAAA,GAAA;mBAAO;cAAC,SAAA,EAAW;YAAZ;UAAP,CAAxB;QAAf;MAFgB,CAAlB;MAIA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAC,IAAD,CAAA,GAAA;QACf,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAA,IAAkB,IAAI,CAAC,MAAL,KAAe,CAApC,GAA2C,IAAI,CAAC,CAAD,CAA/C,GAAwD;QAC/D,IAA0B,QAAA,CAAS,IAAT,CAA1B;UAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,GAAX,EAAP;;eACA;UAAC,eAAA,EAAiB,IAAI,CAAC,GAAL,CAAS,CAAC,CAAD,CAAA,GAAA;mBAAO;cAAC,SAAA,EAAW;YAAZ;UAAP,CAAT;QAAlB;MAHe,CAAjB;MAKA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAC,IAAD,CAAA,GAAA;AACrB,YAAA;QAAM,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;QAC1C,GAAA,GAAM,OAAO,CAAC,GAAG,CAAC,IAAD;QACjB,KAA4E,GAA5E;UAAA,MAAM,IAAI,QAAJ,CAAa,CAAA,uCAAA,CAAA,CAA0C,IAA1C,CAAA,CAAb,EAAN;;eACA;MAJe,CAAjB;MAMA,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAC,IAAD,CAAA,GAAA;QACf,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C;UAAC,iBAAA,EAAmB;YAAC,SAAA,EAAW;UAAZ;QAApB;MAFe,CAAjB;MAIA,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,CAAC,IAAD,CAAA,GAAA;AACvB,YAAA,GAAA,EAAA;QAAM,CAAC,IAAA,GAAK,EAAN,EAAU,IAAA,GAAK,CAAA,CAAf,CAAA,GAAwB,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAtB,GAAgC,CAAC,IAAD;QACrD,GAAA,GAAM,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,OAAO,CAAC,GAA1B,EAA+B,IAA/B;eACN,IAAC,CAAA,SAAD,CAAW;UAAC,KAAA,EAAO,CAAC,IAAC,CAAA,QAAF,EAAY,IAAZ;QAAR,CAAX,EAAuC,CAAA,CAAA,GAAA;iBACrC,CAAC,IAAC,CAAA,SAAD,CAAW,IAAX,EAAiB,CAAC,GAAD,CAAjB,CAAA,IAA2B,EAA5B,CAA+B,CAAC,OAAhC,CAAwC,KAAxC,EAA+C,EAA/C;QADqC,CAAvC;MAHiB,CAAnB;MAMA,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,CAAC,IAAD,CAAA,GAAA;AACpB,YAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;QAAM,CAAC,IAAA,GAAK,EAAN,EAAU,IAAA,GAAK,CAAA,CAAf,CAAA,GAAwB,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAtB,GAAgC,CAAC,IAAD;QACrD,IAAA,GAAO,MAAM,CAAC,IAAP,CAAY,IAAZ;QACP,IAAA,GAAO,IAAI,CAAC,MAAL,CAAY,CAAC,QAAA,CAAC,EAAD,EAAK,CAAL,CAAA;iBAAW,EAAE,CAAC,MAAH,CAAU,CAAC,CAAA,CAAA,CAAA,CAAI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,CAAD,CAAnB,CAAJ,CAAA,CAAA,CAAD,CAAV;QAAX,CAAD,CAAZ,EAAsE,EAAtE;QACP,IAAA,GAAO,CAAA,iBAAA,CAAA,CAAoB,IAAI,CAAC,IAAL,CAAU,GAAV,CAApB,CAAA,EAAA,CAAA,CAAsC,IAAtC,CAAA,GAAA,CAAA,CAAgD,IAAI,CAAC,IAAL,CAAU,GAAV,CAAhD,CAAA,CAAA;QACP,GAAA,GAAM,IAAC,CAAA,IAAD,CAAM,IAAI,QAAJ,CAAa,IAAb,CAAkB,CAAC,IAAnB,CAAwB,IAAxB,CAAN;QACN,IAA4D,WAA5D;UAAA,MAAM,IAAI,QAAJ,CAAa,0BAAb,EAAyC,IAAzC,EAAN;;eACA;MAPc,CAAhB;MASA,IAAC,CAAA,QAAD,CAAU,SAAV,EAAqB,CAAC,IAAD,CAAA,GAAA;eACnB,IAAC,CAAA,YAAD,CAAc,IAAd;MADmB,CAArB;MAGA,IAAC,CAAA,QAAD,CAAU,YAAV,EAAwB,CAAC,IAAD,CAAA,GAAA;AAC5B,YAAA,QAAA,EAAA;QAAM,CAAA,CAAC,QAAD,EAAW,KAAX,CAAA,GAAoB,IAAC,CAAA,YAAD,CAAc,IAAd,CAApB;eACA,CAAA,yBAAA,CAAA,CAA4B,QAA5B,CAAA,CAAA,CAAA,CAAwC,KAAxC,CAAA;MAFsB,CAAxB;MAIA,IAAC,CAAA,QAAD,CAAU,YAAV,EAAwB,CAAC,IAAD,CAAA,GAAA;AAC5B,YAAA,QAAA,EAAA;QAAM,CAAA,CAAC,QAAD,EAAW,KAAX,CAAA,GAAoB,IAAC,CAAA,YAAD,CAAc,IAAd,CAApB;eACA,CAAA,KAAA,CAAA,CAAQ,QAAR,CAAA,CAAA,CAAA,CAAoB,KAApB,CAAA;MAFsB,CAAxB;MAIA,IAAC,CAAA,QAAD,CAAU,oBAAV,EAAgC,CAAC,IAAD,CAAA,GAAA;AACpC,YAAA,QAAA,EAAA;QAAM,CAAA,CAAC,QAAD,EAAW,KAAX,CAAA,GAAoB,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB;UAAC,KAAA,EAAO;QAAR,CAApB,CAApB;eACA,CAAA,yBAAA,CAAA,CAA4B,QAA5B,CAAA,CAAA,CAAA,CAAwC,KAAxC,CAAA;MAF8B,CAAhC;MAIA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,CAAC,IAAD,CAAA,GAAA;QACrB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,IAAI,CAAC,QAAL,CAAc,IAAd;MAFqB,CAAvB;MAIA,IAAC,CAAA,QAAD,CAAU,UAAV,EAAsB,CAAC,IAAD,CAAA,GAAA;QACpB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,IAAI,CAAC,QAAL,CAAc,IAAd;MAFoB,CAAtB;MAIA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,CAAC,IAAD,CAAA,GAAA;QACrB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,IAAI,CAAC,KAAL,CAAW,IAAX;MAFqB,CAAvB;MAIA,IAAC,CAAA,QAAD,CAAU,UAAV,EAAsB,CAAC,IAAD,CAAA,GAAA;QACpB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,IAAI,CAAC,SAAL,CAAe,IAAf;MAFoB,CAAtB;MAIA,IAAC,CAAA,QAAD,CAAU,MAAV,EAAkB,CAAC,IAAD,CAAA,GAAA;QAChB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,EAAE,CAAC,YAAH,CAAgB,IAAhB;MAFgB,CAAlB;MAIA,IAAC,CAAA,QAAD,CAAU,cAAV,EAA0B,CAAC,IAAD,CAAA,GAAA;QACxB,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;eAC1C,IAAI,CAAC,QAAL,CAAc,IAAC,CAAA,qBAAD,CAAuB,IAAvB,CAAd;MAFwB,CAA1B;MAIA,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,CAAC,IAAD,CAAA,GAAA;eACjB,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,IAAlB;MADiB,CAAnB;MAGA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,CAAC,IAAD,CAAA,GAAA;eACrB,SAAS,CAAC,KAAV,CAAgB,IAAhB,EAAsB,IAAtB;MADqB,CAAvB;MAGA,IAAC,CAAA,QAAD,CAAU,MAAV,EAAkB,CAAC,IAAD,CAAA,GAAA;AACtB,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAAM;AAAA;QAAA,KAAA,sCAAA;;uBAAA;YAAC,GAAA,EAAK,CAAN;YAAS,KAAA,EAAO,IAAI,CAAC,CAAD;UAApB;QAAA,CAAA;;MADgB,CAAlB;MAGA,IAAC,CAAA,WAAD,CAAa,OAAb,EAAsB,CAAC,IAAD,CAAA,GAAA;AAC1B,YAAA,UAAA,EAAA,UAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA;QAAM,IAAA,GAAc;QACd,UAAA,GAAc,CAAA;QACd,UAAA,GAAc,CAAC,UAAD;QACd,UAAA,GAAc,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,IAAD,CAAM,CAAC,UAAhC;AACd;QAAA,KAAA,SAAA;;UACE,cAAS,YAAL,OAAH,GAAwB,UAAxB,GAAwC,UAAzC,CAAoD,CAAC,CAAD,CAApD,GAA0D;QAD5D;eAEA,KAAA,CAAM,IAAN,EAAY,CAAC,IAAD,EAAO,UAAP,CAAZ;MAPoB,CAAtB;IAtMW;;IA+Mb,WAAa,CAAC,IAAD,CAAA;aAAU,IAAC,CAAA,IAAD,CAAM,IAAN;IAAV;;IAEb,SAAW,CAAC,GAAD,EAAM,CAAN,CAAA;MACT,GAAA,GAAM,IAAI,CAAC,SAAL,CAAe,GAAf;aACN,CAAC,IAAC,CAAA,KAAK,CAAC,GAAD,CAAN,IAAe,CAAC,IAAC,CAAA,KAAK,CAAC,GAAD,CAAN,GAAc,CAAC,CAAA,CAAA,CAAD,CAAf,CAAhB,CAAsC,CAAC,CAAD;IAF7B;;IAIX,YAAc,CAAC,IAAD,EAAO,IAAP,CAAA;AAChB,UAAA,QAAA,EAAA,KAAA,EAAA;MAAI,IAAA,GAAU,OAAA,CAAQ,IAAR,CAAH,GAAsB,IAAI,CAAC,CAAD,CAA1B,GAAmC;MAC1C,IAAuB,QAAA,CAAS,IAAT,CAAvB;QAAA,IAAA,GAAO;UAAC,IAAA,EAAM;QAAP,EAAP;;MACA,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;MACP,CAAA,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,CAAA,GAA0B,IAA1B;MACA,IAAG,IAAC,CAAA,IAAI,CAAC,SAAT;QACE,IAAC,CAAA,UAAD,GAAc;eACd,IAAC,CAAA,SAAD,CAAW;UAAC,OAAA,EAAS,CAAC,IAAC,CAAA,QAAD,CAAU,IAAV,CAAD,EAAkB,QAAlB,EAA4B,KAA5B;QAAV,CAAX,EAA0D,CAAA,CAAA,GAAA;iBACxD;AACE,oBAAA,KAAA;AAAA,oBACO,WAAA,CAAY,IAAZ,CADP;uBAC8B,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,QAAhB;AAD9B,oBAEO,KAFP;uBAEkB,IAAC,CAAA,aAAD,CAAe,IAAf,EAAqB,QAArB;AAFlB;uBAGO,IAAC,CAAA,SAAD,CAAW,IAAX,EAAiB,QAAjB;AAHP;uBADF,CAKC,CAAC;QANsD,CAA1D,EAFF;OAAA,MAAA;eAUE;UAAA,QAAA,EAAU,gBAAV;UACA,KAAA,EAAU,CAAA,CAAA,CAAG,IAAC,CAAA,IAAI,CAAC,QAAT,CAAA,WAAA;QADV,EAVF;;IALY;;IAkBd,SAAW,CAAC,CAAD,CAAA;AACT,cAAA,KAAA;AAAA,aACO,CAAC,CAAC,IAAF,KAAU,UADjB;iBACiC;AADjC,aAEO,CAAC,CAAC,IAAF,KAAU,OAFjB;iBAE8B,IAAI,QAAJ,CAAa,CAAC,CAAC,OAAf;AAF9B;iBAGO,IAAI,QAAJ,CAAa,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,CAAA,EAAA,CAAA,CAAc,CAAC,CAAC,OAAhB,CAAA,CAAb;AAHP;IADS;;IAMX,KAAO,CAAC,CAAD,CAAA;AACT,UAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA;MAAI,CAAA,CAAC,OAAD,EAAU,IAAV,EAAgB,QAAhB,CAAA,GAA4B,CAAA,GAAI,IAAC,CAAA,SAAD,CAAW,CAAX,CAAhC;MACA,IAAG,CAAI,QAAP;QACE,MAAA,GAAS;QACT,IAAwB,OAAxB;UAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAA;;QACA,IAAkC,IAAC,CAAA,QAAnC;UAAA,MAAM,CAAC,IAAP,CAAY,CAAA,GAAA,CAAA,CAAM,IAAC,CAAA,QAAP,CAAA,CAAZ,EAAA;;QACA,IAA4C,IAAC,CAAA,QAAQ,CAAC,MAAtD;UAAA,MAAM,CAAC,IAAP,CAAY,CAAA,GAAA,CAAA,CAAM,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAf,CAAN,CAAA,CAAZ,EAAA;;QACA,CAAC,CAAC,OAAF,GAAY,MAAM,CAAC,IAAP,CAAY,IAAZ,EALd;;MAMA,CAAC,CAAC,QAAF,GAAa;MACb,MAAM;IATD;;IAWP,WAAa,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAA;AACf,UAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA;MAAI,GAAA,GAAM,YAAA,CAAa,GAAb,EAAkB,KAAlB;MACN,MAAA,GAAS,IAAA,mCAAe,CAAE,QAAZ,CAAqB,OAArB,UAAL;MACT,MAAA,GAAS,IAAA,mCAAe,CAAE,QAAZ,CAAqB,OAArB,UAAL;MACT,GAAG,CAAC,GAAJ,GAAU,YAAA,CAAa,MAAb,EAAqB,KAArB;MACV,GAAG,CAAC,GAAJ,GAAU,YAAA,CAAa,MAAb,EAAqB,KAArB;MACV,GAAG,CAAC,GAAJ,GAAU,CAAC,GAAG,CAAC,GAAL,EAAU,GAAG,CAAC,GAAd,CAAkB,CAAC,MAAnB,CAA0B,QAA1B,CAAmC,CAAC,IAApC,CAAyC,IAAzC;MACV,IAAG,GAAH;eACE,IADF;OAAA,MAAA;QAGE,IAAG,GAAG,CAAC,MAAJ,KAAc,CAAjB;UACE,GAAG,CAAC,OAAJ,CAAY,gBAAZ,EAA8B;YAAC,IAAA,EAAM,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,GAAG,CAAC,GAAf,CAAA;UAAP,CAA9B;iBACA,OAFF;SAAA,MAAA;UAIE,MAAM,IAAI,QAAJ,CAAa,CAAA,kBAAA,CAAA,CAAqB,GAAG,CAAC,MAAzB,CAAA,CAAb,EAAgD,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,GAAG,CAAC,GAAf,CAAA,CAAhD,EAJR;SAHF;;IAPW;;IAgBb,SAAW,CAAC,GAAD,EAAM,IAAN,EAAY,MAAI,KAAhB,CAAA;AACb,UAAA;MAAI,GAAA,GAAM,SAAA,CAAU,GAAV,EAAe,KAAA,CAAM;QAAC,KAAA,EAAO,MAAR;QAAgB,KAAA,EAAO;MAAvB,CAAN,EAA2C,IAA3C,CAAf;aACN,IAAC,CAAA,WAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB;IAFS;;IAIX,aAAe,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,MAAI,KAAtB,CAAA;AACjB,UAAA;MAAI,GAAA,GAAM,SAAA,CAAU,GAAV,EAAe,IAAf,EAAqB,KAAA,CAAM;QAAC,KAAA,EAAO,MAAR;QAAgB,KAAA,EAAO;MAAvB,CAAN,EAA2C,IAA3C,CAArB;aACN,IAAC,CAAA,WAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB;IAFa;;IAIf,OAAS,CAAC,GAAD,EAAM,CAAN,CAAA;AACX,UAAA;MAAI,GAAA,GAAM,OAAO,CAAC,GAAR,CAAA;MACN,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;eAAI,CAAA,CAAA,EAAJ;OAAA;QAAgB,OAAO,CAAC,KAAR,CAAc,GAAd,EAAhB;;IAHO;;IAKT,YAAc,CAAC,EAAD,EAAK,CAAL,CAAA;AAChB,UAAA,GAAA,EAAA;MAAI,CAAC,IAAC,CAAA,QAAF,EAAY,GAAZ,CAAA,GAAmB,CAAC,EAAD,EAAK,IAAC,CAAA,QAAN;MACnB,GAAA,GAAM,CAAA,CAAA;MACN,IAAC,CAAA,QAAD,GAAY;aACZ;IAJY;;IAMd,YAAc,CAAC,QAAD,EAAW,CAAX,CAAA;AAChB,UAAA;MAAI,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,KAAA,CAAM,CAAA,CAAN,EAAU,IAAA,CAAK,IAAC,CAAA,SAAN,CAAV,EAA4B,YAAA,CAAa,QAAb,CAA5B,CAAhB;MACA,GAAA,GAAM,CAAA,CAAA;MACN,IAAC,CAAA,SAAS,CAAC,GAAX,CAAA;aACA;IAJY;;IAMd,gBAAkB,CAAA,CAAA;aAAM,CAAC,IAAC,CAAA,QAAF,CAAW,CAAC,MAAZ,CAAmB,IAAC,CAAA,QAApB;IAAN;;IAElB,aAAe,CAAC,SAAD,EAAY,GAAZ,CAAA;MACb,IAAG,GAAH;eAAY,GAAA,CAAI,IAAI,CAAC,SAAL,CAAe,CAAC,IAAC,CAAA,gBAAD,CAAA,CAAD,EAAqB,GAArB,CAAf,CAAJ,EAAZ;OAAA,MAAA;eAAgE,OAAA,CAAQ,SAAR,EAAhE;;IADa;;IAGf,UAAY,CAAC,QAAD,EAAW,MAAM,EAAjB,CAAA;MACV,IAAG,IAAC,CAAA,UAAD,IAAgB,CAAI,IAAC,CAAA,IAAI,CAAC,QAA7B;QACE,MAAM,IAAI,QAAJ,CAAa,gDAAb,EADR;;MAEA,QAAA,GAAW,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAc,GAAd,CAAA;aACX;QAAA,MAAA,EAAU,IAAC,CAAA,MAAX;QACA,OAAA,EAAU,IAAC,CAAA,OAAD,CAAS,QAAT,CADV;QAEA,IAAA,EAAU;UAAE,QAAA,EAAU,IAAC,CAAA,IAAI,CAAC,QAAlB;UAA4B,KAAA,EAAO,CAAA,CAAA,CAAG,IAAC,CAAA,IAAI,CAAC,QAAT,CAAA,CAAA,CAAoB,QAApB,CAAA;QAAnC;MAFV;IAJU;;IAQZ,SAAW,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,SAAO,MAAxB,CAAA;AACb,UAAA;MAAI,GAAA,GAAM,IAAC,CAAA,UAAD,CAAY,GAAA,CAAI,GAAA,IAAO,IAAX,CAAZ,EAA8B,GAA9B;MACN,GAAG,CAAC,OAAJ,CAAY,CAAA,MAAA,CAAA,CAAS,IAAC,CAAA,QAAD,CAAU,MAAV,CAAT,CAAA,IAAA,CAAA,CAAgC,GAAG,CAAC,OAApC,CAAA,CAAZ;MACA,EAAE,CAAC,aAAH,CAAiB,GAAG,CAAC,OAArB,EAA8B,IAA9B;aACA;IAJS;;IAMX,qBAAuB,CAAC,IAAD,CAAA;AACzB,UAAA,GAAA,EAAA;MAAI,OAAA,GAAU,IAAI,IAAC,CAAC,WAAN,CAAkB,CAAE,SAAD,IAAC,CAAA,OAAF,EAAY,OAAD,IAAC,CAAA,KAAZ,EAAoB,MAAD,IAAC,CAAA,IAApB,CAAlB;MACV,GAAA,GAAM,OAAO,CAAC,aAAR,CAAsB,IAAtB;MACN,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,MAAM,CAAC,MAAR,CAAe,OAAO,CAAC,MAAvB;aACV;IAJqB;;IAMvB,UAAY,CAAC,GAAD,EAAM,GAAN,CAAA;AACd,UAAA;MAAI,GAAA,GAAM,IAAC,CAAA,SAAD,CAAW,GAAX,EAAgB,IAAhB,EAAsB,IAAtB;MACN,GAAA,GAAM,YAAA,CAAa,GAAb,EAAkB,KAAlB;MACN,IAAG,GAAG,CAAC,MAAJ,KAAc,CAAjB;eACE,GAAG,CAAC,OAAJ,CAAY,gBAAZ,EAA8B;UAAC,IAAA,EAAM,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,GAAG,CAAC,GAAf,CAAA;QAAP,CAA9B,EADF;OAAA,MAAA;QAGE,GAAG,CAAC,OAAJ,CAAY,CAAA,kBAAA,CAAA,CAAqB,GAAG,CAAC,MAAzB,CAAA,CAAZ,EAA+C;UAAC,IAAA,EAAM;QAAP,CAA/C;QACA,MAAM,IAAI,QAAJ,CAAa,GAAb,EAAkB,GAAG,CAAC,GAAtB,EAJR;;IAHU;;IASZ,IAAM,CAAC,IAAD,CAAA;AACR,UAAA;MAAI,GAAG,CAAC,OAAJ,CAAY,CAAA,QAAA,CAAA,CAAW,IAAC,CAAA,QAAZ,CAAA,CAAZ;MACA,GAAA,GAAM,CAAA,CAAA,CAAG,IAAC,CAAA,IAAI,CAAC,MAAT,EAAA,CAAA,CAAmB,IAAnB,CAAA;aACN,IAAC,CAAA,OAAD,CAAS,IAAC,CAAA,OAAV,EAAmB,CAAC,CAAA,CAAA,GAAA;eAAM,IAAC,CAAA,UAAD,CAAY,GAAZ,EAAiB,YAAjB;MAAN,CAAD,CAAnB;IAHI;;IAKN,QAAU,CAAC,IAAD,CAAA;AACZ,UAAA;MAAI,GAAG,CAAC,OAAJ,CAAY,CAAA,WAAA,CAAA,CAAc,IAAC,CAAA,QAAf,CAAA,CAAZ;MACA,GAAA,GAAM,CAAA,6DAAA,CAAA,CAEwB,IAFxB,CAAA,GAAA;aAIN,IAAC,CAAA,UAAD,CAAY,GAAZ,EAAiB,qCAAjB;IANQ;;IAQV,aAAe,CAAC,IAAD,EAAO,GAAP,CAAA;AACjB,UAAA;AAAI;QACE,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,QAAD,CAAU,IAAV;eACZ,IAAC,CAAA,YAAD,CAAc,EAAd,EAAkB,CAAA,CAAA,GAAA;AACxB,cAAA;UAAQ,GAAA,GAAM,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,qBAAD,CAAuB,IAAvB,CAAX,EAAyC,OAAA,CAAQ,IAAR,CAAzC,EAAwD,GAAxD,EAA6D,IAA7D;UACN,IAAqB,IAAC,CAAA,IAAI,CAAC,MAA3B;YAAA,IAAC,CAAA,IAAD,CAAM,GAAG,CAAC,OAAV,EAAA;;UACA,IAAyB,IAAC,CAAA,IAAI,CAAC,UAA/B;YAAA,IAAC,CAAA,QAAD,CAAU,GAAG,CAAC,OAAd,EAAA;;iBACA;QAJgB,CAAlB,EAFF;OAOA,aAAA;QAAM;eAAO,IAAC,CAAA,KAAD,CAAO,CAAP,EAAb;;IARa;;IAUf,SAAW,CAAC,IAAD,EAAO,GAAP,CAAA;AACb,UAAA;MAAI,GAAA,GAAM,IAAC,CAAA,UAAD,CAAY,IAAC,CAAA,aAAD,CAAe,IAAf,EAAqB,GAArB,CAAZ,EAAuC,OAAA,CAAQ,IAAR,CAAvC;MACN,GAAG,CAAC,OAAJ,CAAY,CAAA,MAAA,CAAA,CAAS,IAAC,CAAA,QAAD,CAAU,IAAV,CAAT,CAAA,IAAA,CAAA,CAA8B,GAAG,CAAC,OAAlC,CAAA,CAAZ;MACA,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB,GAAG,CAAC,OAA1B;aACA;IAJS;;IAMX,QAAU,CAAC,GAAD,EAAM,GAAN,CAAA;AACZ,UAAA,GAAA,EAAA;MAAI,MAAA,GAAS,IAAC,CAAA,OAAD,CAAS,CAAA,CAAA,CAAG,kBAAA,CAAmB,IAAC,CAAA,QAAD,CAAU,GAAV,CAAnB,CAAH,CAAA,IAAA,CAAT;MACT,GAAG,CAAC,OAAJ,CAAY,CAAA,WAAA,CAAA,CAAc,GAAd,CAAA,CAAZ;MACA,IAAC,CAAA,SAAD,CAAW,CAAA,QAAA,CAAA,CAAW,MAAX,CAAA,EAAA,CAAX,EAAkC;QAAC,GAAA,EAAK;MAAN,CAAlC;MACA,GAAA,GAAM,IAAC,CAAA,UAAD,CAAY,IAAC,CAAA,aAAD,CAAe,GAAf,EAAoB,GAApB,CAAZ,EAAsC,MAAtC;MACN,GAAG,CAAC,OAAJ,CAAY,CAAA,MAAA,CAAA,CAAS,IAAC,CAAA,QAAD,CAAU,GAAV,CAAT,CAAA,IAAA,CAAA,CAA6B,GAAG,CAAC,OAAjC,CAAA,CAAZ;MACA,EAAE,CAAC,UAAH,CAAc,MAAd,EAAsB,GAAG,CAAC,OAA1B;aACA;IAPQ;;IASV,QAAU,CAAC,IAAD,CAAA;aACR,IAAI,CAAC,QAAL,CAAc,IAAC,CAAA,OAAf,EAAwB,IAAxB;IADQ;;IAGV,OAAS,CAAC,IAAD,CAAA;aACP,IAAI,CAAC,IAAL,CAAU,IAAC,CAAA,IAAI,CAAC,MAAhB,EAAwB,IAAxB;IADO;;IAGT,QAAU,CAAC,IAAD,EAAO,CAAP,CAAA;AACZ,UAAA,GAAA,EAAA;MAAI,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,IAAC,CAAA,QAAD,CAAU,IAAV,CAAb;MACA,CAAC,GAAD,EAAM,IAAC,CAAA,QAAP,CAAA,GAAmB,CAAC,IAAC,CAAA,QAAF,EAAY,IAAC,CAAA,QAAD,CAAU,IAAV,CAAZ;MACnB,GAAG,CAAC,OAAJ,CAAY,CAAA,aAAA,CAAA,CAAgB,IAAC,CAAA,QAAjB,CAAA,CAAZ;MACA,GAAA,GAAM,IAAC,CAAA,OAAD,CAAS,IAAI,CAAC,OAAL,CAAa,IAAb,CAAT,EAA6B,CAAC,QAAA,CAAA,CAAA;eAAM,CAAA,CAAE,IAAI,CAAC,QAAL,CAAc,IAAd,CAAF;MAAN,CAAD,CAA7B;MACN,IAAC,CAAA,QAAD,GAAY;aACZ;IANQ;;IAQV,eAAiB,CAAC,IAAD,EAAO,CAAP,CAAA;aACf,IAAC,CAAA,SAAD,CAAW;QAAC,eAAA,EAAiB,IAAC,CAAA,QAAD,CAAU,IAAV;MAAlB,CAAX,EAA+C,CAAA,CAAA,GAAA;eAAM,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,CAAhB;MAAN,CAA/C;IADe;;IAGjB,WAAa,CAAC,IAAD,EAAO,IAAP,CAAA;MACX,IAAC,CAAA,cAAc,CAAC,IAAD,CAAf,GAAwB;aACxB;IAFW;;IAIb,SAAW,CAAC,IAAD,CAAA;MACT,IAAC,CAAA,SAAD,GAAc,CAAC,CAAA,CAAD;kBADhB,CAAA,SAEE,CAAM,IAAN;IAFS;;IAIX,aAAe,CAAC,YAAD,EAAe,GAAf,CAAA;AACjB,UAAA;AAAI;QACE,GAAA,GAAM,GAAA,IAAO,EAAE,CAAC,YAAH,CAAgB,YAAhB,CAA6B,CAAC,QAA9B,CAAuC,OAAvC;eACb,IAAC,CAAA,eAAD,CAAiB,YAAjB,EAA+B,CAAC,IAAD,CAAA,GAAA;iBAAU,IAAC,CAAA,SAAD,CAAW,GAAX;QAAV,CAA/B,EAFF;OAGA,aAAA;QAAM;eAAO,IAAC,CAAA,KAAD,CAAO,CAAP,EAAb;;IAJa;;EAnYjB;;EAyYA,MAAM,CAAC,OAAP,GAAiB;AAlkBjB",
  "sourcesContent": [
    "yaml            = require 'js-yaml'\nfs              = require 'fs'\nos              = require 'os'\npath            = require 'path'\nassert          = require 'assert'\ncrypto          = require 'crypto'\n{spawnSync}     = require 'child_process'\nlog             = require './log'\nCfnError        = require './CfnError'\nYamlTransformer = require './yaml-transformer'\n{ResourceTypes} = require './schema/CloudFormationResourceSpecification.json'\n\n#=============================================================================#\n# Helper functions.                                                           #\n#=============================================================================#\n\ndbg = (x) ->\n  console.log require('util').inspect {dbg: x}, {depth: null}\n  x\n\ntopLevelResourceProperties = [\n  'Type'\n  'Condition'\n  'CreationPolicy'\n  'DeletionPolicy'\n  'DependsOn'\n  'Metadata'\n  'UpdatePolicy'\n  'UpdateReplacePolicy'\n]\n\nidentity = (x) -> x\n\nassoc = (xs, k, v) ->\n  xs[k] = v\n  xs\n\nconj = (xs, x) ->\n  xs.push(x)\n  xs\n\nreadFile = (file) ->\n  fs.readFileSync(file).toString('utf-8')\n\ntypeOf = (thing) ->\n  Object::toString.call(thing)[8...-1]\n\nfileExt = (file) ->\n  if (e = split(path.basename(file), '.', 2)[1])? then \".#{e}\"\n\nmerge = (args...) ->\n  Object.assign.apply(null, args)\n\ndeepMerge = (args...) ->\n  dm = (x, y) ->\n    if not (isObject(x) and isObject(y))\n      y\n    else\n      ret = Object.assign({}, x)\n      ret[k] = dm(x[k], v) for k, v of y\n      ret\n  args.reduce(((xs, x) -> dm(xs, x)), {})\n\nhashMap = (args...) ->\n  ret = {}\n  ret[args[2*i]] = args[2*i+1] for i in [0...args.length/2]\n  ret\n\nisDirectory = (file) ->\n  fs.statSync(file).isDirectory()\n\nreduceKv = (map, f) ->\n  Object.keys(map).reduce(((xs, k) -> f(xs, k, map[k])), {})\n\nnotEmpty = (map) ->\n  Object.keys(map or {}).length > 0\n\nmd5 = (data) ->\n  crypto.createHash(\"md5\").update(data).digest(\"hex\")\n\nmd5File = (filePath) ->\n  md5(fs.readFileSync(filePath))\n\nmd5Dir = (dirPath) ->\n  origDir = process.cwd()\n  try\n    process.chdir(dirPath)\n    add2tree = (tree, path) -> assoc(tree, path, md5Path(path))\n    md5(JSON.stringify(fs.readdirSync('.').sort().reduce(add2tree, {})))\n  finally\n    process.chdir(origDir)\n\nmd5Path = (path) ->\n  (if isDirectory(path) then md5Dir else md5File)(path)\n\npeek = (ary) -> ary[ary.length - 1]\n\ngetIn = (obj, ks) -> ks.reduce(((xs, x) -> xs[x]), obj)\n\nsplit = (str, sep, count=Infinity) ->\n  toks  = str.split(sep)\n  n     = Math.min(toks.length, count) - 1\n  toks[0...n].concat(toks[n..].join(sep))\n\nisString  = (x) -> typeOf(x) is 'String'\nisArray   = (x) -> typeOf(x) is 'Array'\nisObject  = (x) -> typeOf(x) is 'Object'\nisBoolean = (x) -> typeOf(x) is 'Boolean'\n\nassertObject = (thing) ->\n  assert.ok(typeOf(thing) in [\n    'Object'\n    'Undefined'\n    'Null'\n  ], \"expected an Object, got #{JSON.stringify(thing)}\")\n  thing\n\nassertArray = (thing) ->\n  assert.ok(isArray(thing), \"expected an Array, got #{JSON.stringify(thing)}\")\n  thing\n\nparseKeyOpt = (opt) ->\n  if (multi = opt.match(/^\\[(.*)\\]$/)) then multi[1].split(',') else opt\n\nparseKeyOpts = (opts) ->\n  opts.reduce(((xs, x) ->\n    [k, v] = x.split('=')\n    v ?= k\n    merge(xs, hashMap(k, parseKeyOpt(v)))\n  ), {})\n\nmergeStrings = (toks, sep = '') ->\n  reducer = (xs, x) ->\n    x = \"#{x}\" unless isObject(x)\n    y = xs.pop()\n    xs.concat(if isString(x) and isString(y) then [[y,x].join(sep)] else [y,x])\n  toks.reduce(reducer, []).filter((x) -> x? and x isnt '')\n\nprependLines = (x, prefix) ->\n  return null unless x and isString(x)\n  x.split(/\\n/)\n    .map((x) -> x.trimRight())\n    .filter(identity)\n    .map((x) -> \"#{prefix}| #{x}\")\n    .join('\\n')\n\nindexOfClosingCurly = (form) ->\n  depth = 0\n  for i in [0...form.length]\n    switch form[i]\n      when '{' then depth++\n      when '}' then return i if not depth--\n  return -1\n\ninterpolateSub = (form) ->\n  ret = []\n  while true\n    if form.startsWith('${!')\n      ret.push(form[0...3])\n      form = form[3..]\n    else if form.startsWith('${')\n      i = indexOfClosingCurly(form[2..])\n      assert.notEqual(i, -1, \"no closing curly: #{JSON.stringify(form)}\")\n      ret.push({Ref: form[2...i+2]})\n      form = form[i+3..]\n    else\n      if (i = form.indexOf('${')) is -1\n        ret.push(form)\n        break\n      else\n        ret.push(form[0...i])\n        form = form[i..]\n  ret\n\nrmCR = (x='') ->\n  lines = []\n  for v in x.split(/\\r/)\n    if v[0] is '\\n' then v = v.slice(1) else lines.pop()\n    lines.push(w) for w in v.split(/\\n/)\n  lines.join('\\n')\n\n#=============================================================================#\n# AWS CLOUDFORMATION YAML TRANSFORMER BASE CLASS                              #\n#=============================================================================#\n\nclass CfnTransformer extends YamlTransformer\n  constructor: ({@basedir, @cache, @opts} = {}) ->\n    super()\n\n    @opts           ?= {}\n    @opts.s3prefix  ?= ''\n    @cache          ?= {}\n    @basedir        ?= process.cwd()\n    @template       = null\n    @needBucket     = false\n    @resourceMacros = []\n    @bindstack      = []\n    @nested         = []\n\n    #=========================================================================#\n    # Redefine and extend built-in CloudFormation macros.                     #\n    #=========================================================================#\n\n    @defmacro 'Base64', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::Base64': form}\n\n    @defmacro 'GetAZs', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::GetAZs': form}\n\n    @defmacro 'ImportValue', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::ImportValue': form}\n\n    @defmacro 'GetAtt', (form) =>\n      form = if isArray(form) and form.length is 1 then form[0] else form\n      {'Fn::GetAtt': if isString(form) then split(form, '.', 2) else form}\n\n    @defmacro 'RefAll', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::RefAll': form}\n\n    @defmacro 'Join', (form) =>\n      [sep, toks] = form\n      switch (xs = mergeStrings(toks, sep)).length\n        when 0 then ''\n        when 1 then xs[0]\n        else {'Fn::Join': [sep, xs]}\n\n    @defmacro 'Condition', 'Condition', (form) =>\n      {Condition: if isArray(form) then form[0] else form}\n\n    @defmacro 'Ref', 'Ref', (form) =>\n      form = if isArray(form) then form[0] else form\n      if isString(form)\n        [ref, ks...] = form.split('.')\n        switch\n          when form.startsWith('$')     then {'Fn::Env': form[1..]}\n          when form.startsWith('%')     then {'Fn::Get': form[1..]}\n          when form.startsWith('@')     then {'Fn::Attr': form[1..]}\n          when peek(@bindstack)[ref]?   then getIn(@walk(peek(@bindstack)[ref]), ks)\n          else {Ref: form}\n      else form\n\n    @defmacro 'Sub', (form) =>\n      form = if isArray(form) and form.length is 1 then form[0] else form\n      switch typeOf(form)\n        when 'String' then {'Fn::Join': ['', interpolateSub(form)]}\n        else {'Fn::Sub': form}\n\n    #=========================================================================#\n    # Define special forms.                                                   #\n    #=========================================================================#\n\n    @defspecial 'Let', (form) =>\n      form = if isArray(form) and form.length is 1 then form[0] else form\n      if isArray(form)\n        @withBindings(@walk(form[0]), => @walk(form[1]))\n      else\n        merge(peek(@bindstack), assertObject(@walk(form)))\n        null\n\n    @defspecial 'Do', (form) =>\n      assertArray(form).reduce(((xs, x) => @walk(x)), null)\n\n    #=========================================================================#\n    # Define custom macros.                                                   #\n    #=========================================================================#\n\n    @defmacro 'Require', (form) =>\n      form = [form] unless isArray(form)\n      require(path.resolve(v))(@) for v in form\n      null\n\n    @defmacro 'Parameters', (form) =>\n      Parameters: form.reduce(((xs, param) =>\n        [name, opts...] = param.split(/ +/)\n        opts = merge({Type: 'String'}, parseKeyOpts(opts))\n        merge(xs, hashMap(name, opts))\n      ), {})\n\n    @defmacro 'Return', (form) =>\n      Outputs: reduceKv form, (xs, k, v) =>\n        [name, opts...] = k.split(/ +/)\n        xport = if notEmpty(opts = parseKeyOpts(opts))\n          opts.Name = @walk {'Fn::Sub': opts.Name} if opts.Name\n          {Export: opts}\n        merge(xs, hashMap(name, merge({Value: v}, xport)))\n\n    @defmacro 'Resources', (form) =>\n      ret = {}\n      for id, body of form\n        [id, Type, opts...] = id.split(/ +/)\n        id = @walk {'Fn::Sub': id}\n        ret[id] = if not Type\n          if (m = @resourceMacros[body.Type]) then m(body) else body\n        else\n          body = merge({Type}, parseKeyOpts(opts), {Properties: body})\n          if (m = @resourceMacros[Type]) then m(body) else body\n      Resources: ret\n\n    @defmacro 'Attr', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::GetAtt': split(form, '.', 2).map((x) => {'Fn::Sub': x})}\n\n    @defmacro 'Get', (form) =>\n      form = if isArray(form) and form.length is 1 then form[0] else form\n      form = form.split('.') if isString(form)\n      {'Fn::FindInMap': form.map((x) => {'Fn::Sub': x})}\n\n    @defmacro 'Env', (form) =>\n      form = if isArray(form) then form[0] else form\n      ret = process.env[form]\n      throw new CfnError(\"required environment variable not set: #{form}\") unless ret\n      ret\n\n    @defmacro 'Var', (form) =>\n      form = if isArray(form) then form[0] else form\n      {'Fn::ImportValue': {'Fn::Sub': form}}\n\n    @defmacro 'Shell', (form) =>\n      [form='', vars={}] = if isArray(form) then form else [form]\n      env = Object.assign({}, process.env, vars)\n      @withCache {shell: [@template, form]}, () =>\n        (@execShell(form, {env}) or '').replace(/\\n$/, '')\n\n    @defmacro 'Js', (form) =>\n      [form='', vars={}] = if isArray(form) then form else [form]\n      args = Object.keys(vars)\n      vals = args.reduce(((xs, x) -> xs.concat([\"(#{JSON.stringify(vars[x])})\"])), [])\n      form = \"return (function(#{args.join ','}){#{form}})(#{vals.join ','})\"\n      ret = @walk(new Function(form).call(@))\n      throw new CfnError('!Js must not return null', form) if not ret?\n      ret\n\n    @defmacro 'Package', (form) =>\n      @packageMacro form\n\n    @defmacro 'PackageURL', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form\n      \"https://s3.amazonaws.com/#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'PackageURI', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form\n      \"s3://#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'PackageTemplateURL', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form, {Parse: true}\n      \"https://s3.amazonaws.com/#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'YamlParse', (form) =>\n      form = if isArray(form) then form[0] else form\n      yaml.safeLoad(form)\n\n    @defmacro 'YamlDump', (form) =>\n      form = if isArray(form) then form[0] else form\n      yaml.safeDump(form)\n\n    @defmacro 'JsonParse', (form) =>\n      form = if isArray(form) then form[0] else form\n      JSON.parse(form)\n\n    @defmacro 'JsonDump', (form) =>\n      form = if isArray(form) then form[0] else form\n      JSON.stringify(form)\n\n    @defmacro 'File', (form) =>\n      form = if isArray(form) then form[0] else form\n      fs.readFileSync(form)\n\n    @defmacro 'TemplateFile', (form) =>\n      form = if isArray(form) then form[0] else form\n      yaml.safeLoad(@transformTemplateFile(form))\n\n    @defmacro 'Merge', (form) =>\n      merge.apply(null, form)\n\n    @defmacro 'DeepMerge', (form) =>\n      deepMerge.apply(null, form)\n\n    @defmacro 'Tags', (form) =>\n      {Key: k, Value: form[k]} for k in Object.keys(form)\n\n    @defresource 'Stack', (form) =>\n      Type        = 'AWS::CloudFormation::Stack'\n      Parameters  = {}\n      Properties  = {Parameters}\n      stackProps  = Object.keys(ResourceTypes[Type].Properties)\n      for k, v of (form.Properties or {})\n        (if k in stackProps then Properties else Parameters)[k] = v\n      merge(form, {Type, Properties})\n\n  macroexpand: (form) -> @walk(form)\n\n  withCache: (key, f) ->\n    key = JSON.stringify key\n    (@cache[key] or (@cache[key] = [f()]))[0]\n\n  packageMacro: (form, opts) ->\n    form = if isArray(form) then form[0] else form\n    form = {Path: form} if isString(form)\n    form = Object.assign(form, opts)\n    {Path, CacheKey, Parse} = form\n    if @opts.dopackage\n      @needBucket = true\n      @withCache {package: [@userPath(Path), CacheKey, Parse]}, () =>\n        (\n          switch\n            when isDirectory(Path) then @writeDir(Path, CacheKey)\n            when Parse then @writeTemplate(Path, CacheKey)\n            else @writeFile(Path, CacheKey)\n        ).code\n    else\n      S3Bucket: 'example-bucket'\n      S3Key:    \"#{@opts.s3prefix}example-key\"\n\n  wrapError: (e) ->\n    switch\n      when e.name is 'CfnError' then e\n      when e.name is 'Error' then new CfnError(e.message)\n      else new CfnError \"#{e.name}: #{e.message}\"\n\n  abort: (e) ->\n    {message, body, aborting} = e = @wrapError(e)\n    if not aborting\n      errmsg = []\n      errmsg.push(message) if message\n      errmsg.push(\"in #{@template}\") if @template\n      errmsg.push(\"at #{@keystack.join('/')}\") if @keystack.length\n      e.message = errmsg.join('\\n')\n    e.aborting = true\n    throw e\n\n  handleShell: (cmd, res, raw) ->\n    cmd = prependLines cmd, 'cmd'\n    stdout = rmCR res.stdout?.toString('utf-8')\n    stderr = rmCR res.stderr?.toString('utf-8')\n    res.out = prependLines(stdout, 'out')\n    res.err = prependLines(stderr, 'err')\n    res.all = [res.out, res.err].filter(identity).join('\\n')\n    if raw\n      res\n    else\n      if res.status is 0\n        log.verbose \"bash: status 0\", {body: \"#{cmd}\\n#{res.all}\"}\n        stdout\n      else\n        throw new CfnError(\"bash: exit status #{res.status}\", \"#{cmd}\\n#{res.all}\")\n\n  execShell: (cmd, opts, raw=false) ->\n    res = spawnSync(cmd, merge({stdio: 'pipe', shell: '/bin/bash'}, opts))\n    @handleShell cmd, res, raw\n\n  execShellArgs: (cmd, args, opts, raw=false) ->\n    res = spawnSync(cmd, args, merge({stdio: 'pipe', shell: '/bin/bash'}, opts))\n    @handleShell cmd, res, raw\n\n  withCwd: (dir, f) ->\n    old = process.cwd()\n    process.chdir(dir)\n    try f() finally process.chdir(old)\n\n  withKeyStack: (ks, f) ->\n    [@keystack, old] = [ks, @keystack]\n    ret = f()\n    @keystack = old\n    ret\n\n  withBindings: (bindings, f) ->\n    @bindstack.push(merge({}, peek(@bindstack), assertObject(bindings)))\n    ret = f()\n    @bindstack.pop()\n    ret\n\n  canonicalKeyPath: () -> [@template].concat(@keystack)\n\n  canonicalHash: (fileOrDir, key) ->\n    if key then md5(JSON.stringify([@canonicalKeyPath(),key])) else md5Path(fileOrDir)\n\n  writePaths: (fileName, ext = '') ->\n    if @needBucket and not @opts.s3bucket\n      throw new CfnError(\"can't generate S3 URL: no S3 bucket configured\")\n    fileName = \"#{fileName}#{ext}\"\n    nested:   @nested\n    tmpPath:  @tmpPath(fileName),\n    code:     { S3Bucket: @opts.s3bucket, S3Key: \"#{@opts.s3prefix}#{fileName}\" }\n\n  writeText: (text, ext, key, source='none') ->\n    ret = @writePaths(md5(key or text), ext)\n    log.verbose \"wrote #{@userPath source} -> #{ret.tmpPath}\"\n    fs.writeFileSync(ret.tmpPath, text)\n    ret\n\n  transformTemplateFile: (file) ->\n    xformer = new @.constructor({@basedir, @cache, @opts})\n    ret = xformer.transformFile(file)\n    @nested = @nested.concat xformer.nested\n    ret\n\n  tryExecRaw: (cmd, msg) ->\n    res = @execShell cmd, null, true\n    cmd = prependLines cmd, 'cmd'\n    if res.status is 0\n      log.verbose \"bash: status 0\", {body: \"#{cmd}\\n#{res.all}\"}\n    else\n      log.verbose \"bash: exit status #{res.status}\", {body: cmd}\n      throw new CfnError msg, res.all\n\n  lint: (file) ->\n    log.verbose \"linting #{@template}\"\n    cmd = \"#{@opts.linter} #{file}\"\n    @withCwd @basedir, (() => @tryExecRaw(cmd, 'lint error'))\n\n  validate: (file) ->\n    log.verbose \"validating #{@template}\"\n    cmd = \"\"\"\n      aws cloudformation validate-template \\\n        --template-body \"$(cat '#{file}')\"\n    \"\"\"\n    @tryExecRaw cmd, 'aws cloudformation validation error'\n\n  writeTemplate: (file, key) ->\n    try\n      @template = @userPath(file)\n      @withKeyStack [], () =>\n        ret = @writeText(@transformTemplateFile(file), fileExt(file), key, file)\n        @lint ret.tmpPath if @opts.linter\n        @validate ret.tmpPath if @opts.dovalidate\n        ret\n    catch e then @abort e\n\n  writeFile: (file, key) ->\n    ret = @writePaths(@canonicalHash(file, key), fileExt(file))\n    log.verbose(\"wrote #{@userPath file} -> #{ret.tmpPath}\")\n    fs.copyFileSync(file, ret.tmpPath)\n    ret\n\n  writeDir: (dir, key) ->\n    tmpZip = @tmpPath(\"#{encodeURIComponent(@userPath(dir))}.zip\")\n    log.verbose(\"packaging: #{dir}\")\n    @execShell(\"zip -qr #{tmpZip} .\", {cwd: dir})\n    ret = @writePaths(@canonicalHash(dir, key), '.zip')\n    log.verbose(\"wrote #{@userPath dir} -> #{ret.tmpPath}\")\n    fs.renameSync(tmpZip, ret.tmpPath)\n    ret\n\n  userPath: (file) ->\n    path.relative(@basedir, file)\n\n  tmpPath: (name) ->\n    path.join(@opts.tmpdir, name)\n\n  pushFile: (file, f) ->\n    @nested.push(@userPath file)\n    [old, @template] = [@template, @userPath(file)]\n    log.verbose(\"transforming #{@template}\")\n    ret = @withCwd path.dirname(file), (() -> f(path.basename(file)))\n    @template = old\n    ret\n\n  pushFileCaching: (file, f) ->\n    @withCache {pushFileCaching: @userPath(file)}, () => @pushFile(file, f)\n\n  defresource: (type, emit) ->\n    @resourceMacros[type] = emit\n    @\n\n  transform: (text) ->\n    @bindstack  = [{}]\n    super(text)\n\n  transformFile: (templateFile, doc) ->\n    try\n      doc = doc or fs.readFileSync(templateFile).toString('utf-8')\n      @pushFileCaching templateFile, (file) => @transform(doc)\n    catch e then @abort e\n\nmodule.exports = CfnTransformer\n"
  ]
}