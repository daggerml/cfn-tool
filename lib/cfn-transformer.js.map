{
  "version": 3,
  "file": "cfn-transformer.js",
  "sourceRoot": "..",
  "sources": [
    "lib/cfn-transformer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "yaml            = require 'js-yaml'\nfs              = require 'fs'\nos              = require 'os'\npath            = require 'path'\nassert          = require 'assert'\nuuid            = require 'uuid'\nfn              = require './fn'\nlog             = require './log'\nCfnError        = require './CfnError'\nYamlTransformer = require './yaml-transformer'\n{ResourceTypes} = require './schema/CloudFormationResourceSpecification.json'\n\n#=============================================================================#\n# Helper functions.                                                           #\n#=============================================================================#\n\ntopLevelResourceProperties = [\n  'Type'\n  'Condition'\n  'CreationPolicy'\n  'DeletionPolicy'\n  'DependsOn'\n  'Metadata'\n  'UpdatePolicy'\n  'UpdateReplacePolicy'\n]\n\nparseKeyOpt = (opt) ->\n  ret = if (multi = opt.match(/^\\[(.*)\\]$/)) then multi[1].split(',') else opt\n  if fn.isArray(ret) then ret.map((x) -> {'Fn::Sub': x}) else {'Fn::Sub': ret}\n\nparseKeyOpts = (opts) ->\n  opts.reduce(((xs, x) ->\n    [k, v] = x.split('=')\n    v ?= k\n    fn.merge(xs, fn.hashMap(k, parseKeyOpt(v)))\n  ), {})\n\nindexOfClosingCurly = (form) ->\n  depth = 0\n  for i in [0...form.length]\n    switch form[i]\n      when '{' then depth++\n      when '}' then return i if not depth--\n  return -1\n\ninterpolateSub = (form) ->\n  ret = []\n  while true\n    if form.startsWith('${!')\n      ret.push(form[0...2])\n      form = form[3..]\n    else if form.startsWith('${')\n      i = indexOfClosingCurly(form[2..])\n      assert.notEqual(i, -1, \"no closing curly: #{JSON.stringify(form)}\")\n      ret.push({Ref: form[2...i+2]})\n      form = form[i+3..]\n    else\n      if (i = form.indexOf('${')) is -1\n        ret.push(form)\n        break\n      else\n        ret.push(form[0...i])\n        form = form[i..]\n  ret\n\nclone = (jsonable) -> JSON.parse JSON.stringify jsonable\n\n#=============================================================================#\n# TRANSFORMER CLASS FOR USE IN REQUIRED MACRO MODULES                         #\n#=============================================================================#\n\nclass CfnModule\n  constructor: (@transformer, @id) ->\n    @transformer.state[@id] ?= {} if @id\n\n  bindings: ->\n    clone fn.peek @transformer.bindstack\n\n  options: ->\n    clone @transformer.opts\n\n  state: ->\n    fn.assertOk @id, 'defmacro: only allowed in !Require modules'\n    @transformer.state[@id]\n\n  defmacro: (name, args...) ->\n    args[args.length - 1] = args[args.length - 1].bind(@)\n    @transformer.defmacro.apply @transformer, [name].concat(args)\n\n  defresource: (name, long, f) ->\n    args[args.length - 1] = args[args.length - 1].bind(@)\n    @transformer.defresource.apply @transformer, [name].concat(args)\n\n  macroexpand: (form) ->\n    @transformer.walk(form)\n\n  md5: (text) ->\n    fn.md5(text)\n\n  tmpPath: (name) ->\n    @transformer.tmpPath name\n\n  userPath: (path) ->\n    @transformer.userPath path\n\n  error: (message, body) ->\n    @transformer.abort new CfnError(message, body)\n\n  warn: (message, body) ->\n    log.warn @transformer.atLocation(message), {body}\n\n  info: (message, body) ->\n    log.info message, {body}\n\n  verbose: (message, body) ->\n    log.verbose message, {body}\n\n  withBindings: (bindings, f) ->\n    @transformer.withBindings bindings, f\n\n  withCache: (key, f) ->\n    fn.assertOk @id, 'withCache: only allowed in !Require modules'\n    @transformer.withCache {module: @id, key}, f\n\n  withCwd: (dir, f) ->\n    @transformer.withCwd dir, f\n\n#=============================================================================#\n# AWS CLOUDFORMATION YAML TRANSFORMER BASE CLASS                              #\n#=============================================================================#\n\nclass CfnTransformer extends YamlTransformer\n  constructor: ({@ns, @basedir, @cache, @opts, @maps, @globals, @state} = {}) ->\n    super()\n\n    @ns             ?= uuid.v4()\n    @opts           ?= {}\n    @opts.s3prefix  ?= ''\n    @cache          ?= {}\n    @basedir        ?= process.cwd()\n    @template       = null\n    @maps           = clone(@maps or {})\n    @globals        = clone(@globals or {})\n    @state          = clone(@state or {})\n    @resourceMacros = []\n    @bindstack      = [@globals]\n    @nested         = []\n\n    #=========================================================================#\n    # Redefine and extend built-in CloudFormation macros.                     #\n    #=========================================================================#\n\n    @defmacro 'Base64', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::Base64': form}\n\n    @defmacro 'GetAZs', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::GetAZs': form}\n\n    @defmacro 'ImportValue', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::ImportValue': form}\n\n    @defmacro 'GetAtt', (form) =>\n      form = if fn.isArray(form) and form.length is 1 then form[0] else form\n      {'Fn::GetAtt': if fn.isString(form) then fn.split(form, '.', 2) else form}\n\n    @defmacro 'RefAll', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::RefAll': form}\n\n    @defmacro 'Join', (form) =>\n      [sep, toks] = form\n      switch (xs = fn.mergeStrings(toks, sep)).length\n        when 0 then ''\n        when 1 then xs[0]\n        else {'Fn::Join': [sep, xs]}\n\n    @defmacro 'Condition', 'Condition', (form) =>\n      {Condition: if fn.isArray(form) then form[0] else form}\n\n    @defmacro 'Ref', 'Ref', (form) =>\n      dfl     = form[1] if fn.isArray(form)\n      form    = fn.assertString(if fn.isArray(form) then form[0] else form)\n      segs    = [ref, ks...] = form.split('.')\n      bind    = fn.peek(@bindstack)\n      refable = (bind[ref]? or segs.length > 1)\n      getin   = (m, ks) =>\n        ret = ks.reduce(((xs, x) => @walk(xs?[x])), m)\n        fn.assertOk ret? or dfl?, \"can't resolve: '#{ks.join('.')}'\"\n        ret ? dfl\n      switch\n        when form.startsWith('$') then {'Fn::Env': form[1..]}\n        when form.startsWith('%') then {'Fn::Get': form[1..]}\n        when form.startsWith('@') then {'Fn::Attr': form[1..]}\n        when form.startsWith('*') then {'Fn::Var': form[1..]}\n        when refable              then getin(bind, segs)\n        else {Ref: form}\n\n    @defmacro 'Sub', (form) =>\n      form = switch\n        when fn.isString(form)                      then [form, {}]\n        when fn.isArray(form) and form.length is 1  then form.concat [{}]\n        when fn.isArray(form) and form.length is 2  then form\n        else throw new CfnError \"invalid type: #{JSON.stringify form}\"\n      {'Fn::Let': [form[1], {'Fn::Join': ['', interpolateSub(form[0])]}]}\n\n    #=========================================================================#\n    # Define special forms.                                                   #\n    #=========================================================================#\n\n    @defspecial 'Let', (form) =>\n      form = if fn.isArray(form) and form.length is 1 then form[0] else form\n      if fn.isArray(form)\n        @withBindings(@walk(form[0]), => @walk(form[1]))\n      else\n        fn.merge(fn.peek(@bindstack), fn.assertObject(form))\n        null\n\n    @defspecial 'Globals', (form) =>\n      @globals = fn.deepMerge @globals, fn.assertObject(form)\n      @bindstack.push(fn.deepMerge(@bindstack.pop(), form))\n      null\n\n    @defspecial 'Mappings', (form = {}) =>\n      @maps = fn.deepMerge @maps, form\n      {Mappings: @maps}\n\n    @defspecial 'Do', (form) =>\n      fn.assertArray(form).reduce(((xs, x) => @walk(x)), null)\n\n    #=========================================================================#\n    # Define custom macros.                                                   #\n    #=========================================================================#\n\n    @defmacro 'Require', (form) =>\n      for v in (if fn.isArray(form) then form else [form])\n        v = path.resolve(v)\n        require(v)(new CfnModule(@, v))\n      null\n\n    @defmacro 'Parameters', (form) =>\n      Parameters: form.reduce(((xs, param) =>\n        [name, opts...] = param.split(/ +/)\n        opts = fn.merge({Type: 'String'}, parseKeyOpts(opts))\n        fn.merge(xs, fn.hashMap(name, opts))\n      ), {})\n\n    @defmacro 'Return', (form) =>\n      log.warn @atLocation '!Return was deprecated in 4.2.0: use !Outputs instead'\n      {'Fn::Outputs': form}\n\n    @defmacro 'Outputs', (form) =>\n      Outputs: fn.reduceKv form, (xs, k, v) =>\n        [name, opts...] = k.split(/ +/)\n        xport = if fn.notEmpty(opts = parseKeyOpts(opts)) then {Export: opts}\n        fn.merge(xs, fn.hashMap(name, fn.merge({Value: v}, xport)))\n\n    @defmacro 'Resources', (form) =>\n      ret = {}\n      for id, body of form\n        [id, Type, opts...] = id.split(/ +/)\n        id = @walk {'Fn::Sub': id}\n        ret[id] = if not Type\n          if (m = @resourceMacros[body.Type]) then m(body) else body\n        else\n          body = fn.merge({Type}, parseKeyOpts(opts), {Properties: body})\n          if (m = @resourceMacros[Type]) then m(body) else body\n      Resources: ret\n\n    @defmacro 'Attr', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::GetAtt': fn.split(form, '.', 2).map((x) => {'Fn::Sub': x})}\n\n    @defmacro 'Get', (form) =>\n      form = if fn.isArray(form) and form.length is 1 then form[0] else form\n      form = form.split('.') if fn.isString(form)\n      {'Fn::FindInMap': form.map((x) => {'Fn::Sub': x})}\n\n    @defmacro 'Env', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      ret = process.env[form]\n      throw new CfnError(\"required environment variable not set: #{form}\") unless ret\n      ret\n\n    @defmacro 'Var', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      {'Fn::ImportValue': {'Fn::Sub': form}}\n\n    @defmacro 'Shell', (form) =>\n      [vars={}, form=''] = switch\n        when fn.isArray(form) and form.length is 2  then form\n        when fn.isArray(form) and form.length is 1  then [null].concat(form)\n        when fn.isString(form)                      then [null, form]\n        else throw new CfnError 'expected <string> or [<object>, <string>]'\n      env = Object.assign({}, process.env, vars)\n      @withCache {shell: [@ns, @template, vars, form]}, () =>\n        (fn.execShell(form, {env}) or '').replace(/\\n$/, '')\n\n    @defmacro 'Js', (form) =>\n      [vars={}, form=''] = switch\n        when fn.isArray(form) and form.length is 2  then form\n        when fn.isArray(form) and form.length is 1  then [{}].concat(form)\n        when fn.isString(form)                      then [{}, form]\n        else throw new CfnError 'expected <string> or [<object>, <string>]'\n      @withCache {js: [@ns, @template, vars, form]}, () =>\n        args = Object.keys(vars)\n        vals = args.reduce(((xs, x) -> xs.concat([\"(#{JSON.stringify(vars[x])})\"])), [])\n        form = \"\"\"\n          return (function(#{args.join ', '}) {\n            #{form}\n          }).bind(arguments[0]).call(null, #{vals.join ', '})\n        \"\"\"\n        ret = @walk (new Function(form)).call(null, new CfnModule(@))\n        throw new CfnError('expected non-null result', form) unless ret?\n        ret\n\n    @defmacro 'Package', (form) =>\n      @packageMacro form\n\n    @defmacro 'PackageURL', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form\n      \"https://s3.amazonaws.com/#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'PackageURI', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form\n      \"s3://#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'PackageTemplateURL', (form) =>\n      {S3Bucket, S3Key} = @packageMacro form, {Parse: true}\n      \"https://s3.amazonaws.com/#{S3Bucket}/#{S3Key}\"\n\n    @defmacro 'YamlParse', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      yaml.safeLoad(form)\n\n    @defmacro 'YamlDump', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      yaml.safeDump(form)\n\n    @defmacro 'JsonParse', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      JSON.parse(form)\n\n    @defmacro 'JsonDump', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      JSON.stringify(form)\n\n    @defmacro 'File', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      @withCache {file: [@ns, path.resolve form]}, () =>\n        fs.readFileSync(form).toString('utf-8')\n\n    @defmacro 'TemplateFile', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      @withCache {templateFile: [@ns, path.resolve form]}, () =>\n        yaml.safeLoad(@transformTemplateFile(form, true))\n\n    @defmacro 'Md5', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      fn.md5(form)\n\n    @defmacro 'Md5File', (form) =>\n      form = if fn.isArray(form) then form[0] else form\n      fn.md5Path(form)\n\n    @defmacro 'Merge', (form) =>\n      fn.merge.apply(null, form)\n\n    @defmacro 'DeepMerge', (form) =>\n      fn.deepMerge.apply(null, form)\n\n    @defmacro 'Tags', (form) =>\n      {Key: k, Value: form[k]} for k in Object.keys(form)\n\n    @defresource 'Stack', (form) =>\n      Type        = 'AWS::CloudFormation::Stack'\n      Parameters  = {}\n      Properties  = {Parameters}\n      stackProps  = Object.keys(ResourceTypes[Type].Properties)\n      for k, v of (form.Properties or {})\n        (if k in stackProps then Properties else Parameters)[k] = v\n      fn.merge(form, {Type, Properties})\n\n  withCache: (key, f) ->\n    key = JSON.stringify key\n    (@cache[key] or (@cache[key] = [f()]))[0]\n\n  addNested: (x) ->\n    x = [x] if fn.isString(x)\n    @nested = x.reduce(\n      (xs, x) -> if x in xs then xs else xs.concat [x]\n      @nested\n    )\n\n  packageMacro: (form, opts) ->\n    form = if fn.isArray(form) then form[0] else form\n    form = {Path: form} if fn.isString(form)\n    form = Object.assign(form, opts)\n    {Path, CacheKey, Parse} = form\n    if @opts.dopackage\n      @addNested @userPath Path\n      @withCache {package: [@ns, @userPath(Path), CacheKey, Parse]}, () =>\n        (\n          switch\n            when fn.isDirectory(Path) then @writeDir(Path, CacheKey)\n            when Parse then @writeTemplate(Path, CacheKey)\n            else @writeFile(Path, CacheKey)\n        ).code\n    else\n      S3Bucket: 'example-bucket'\n      S3Key:    \"#{@opts.s3prefix}example-key\"\n\n  wrapError: (e) ->\n    switch\n      when e.name is 'CfnError' then e\n      when e.name is 'Error' then new CfnError(e.message)\n      else new CfnError \"#{e.name}: #{e.message}\"\n\n  atLocation: (message) ->\n    msg = []\n    msg.push(message) if message\n    msg.push(\"in #{@template}\") if @template\n    msg.push(\"at #{@keystack.join('/')}\") if @keystack.length\n    msg.join('\\n')\n\n  abort: (e) ->\n    e = @wrapError(e)\n    e.message = @atLocation e.message unless e.aborting\n    e.aborting = true\n    throw e\n\n  withCwd: (dir, f) ->\n    old = process.cwd()\n    process.chdir(dir)\n    try f() finally process.chdir(old)\n\n  withKeyStack: (ks, f) ->\n    [@keystack, old] = [ks, @keystack]\n    ret = f()\n    @keystack = old\n    ret\n\n  withBindings: (bindings, f) ->\n    @bindstack.push(fn.merge({}, fn.peek(@bindstack), fn.assertObject(bindings)))\n    ret = f()\n    @bindstack.pop()\n    ret\n\n  canonicalKeyPath: () -> [@template].concat(@keystack)\n\n  canonicalHash: (fileOrDir, key) ->\n    if key then fn.md5(JSON.stringify([@canonicalKeyPath(),key])) else fn.md5Path(fileOrDir)\n\n  writePaths: (fileName, ext = '') ->\n    fileName = \"#{fileName}#{ext}\"\n    nested:   @nested\n    tmpPath:  @tmpPath(fileName),\n    code:     { S3Bucket: @opts.s3bucket, S3Key: \"#{@opts.s3prefix}#{fileName}\" }\n\n  writeText: (text, ext, key, source='none') ->\n    ret = @writePaths(fn.md5(key or text), ext)\n    log.verbose \"wrote '#{@userPath source}' -> '#{ret.tmpPath}'\"\n    fs.writeFileSync(ret.tmpPath, text)\n    ret\n\n  transformTemplateFile: (file, ignoreNested) ->\n    xformer = new @.constructor({@ns, @basedir, @cache, @opts, @maps, @globals, @state})\n    ret = xformer.transformFile(file)\n    @addNested xformer.nested unless ignoreNested\n    ret\n\n  lint: (file) ->\n    log.verbose \"linting '#{@template}'\"\n    cmd = \"#{@opts.linter} #{file}\"\n    @withCwd @basedir, (() => fn.tryExecRaw(cmd, 'lint error'))\n\n  validate: (file) ->\n    log.verbose \"validating '#{@template}'\"\n    cmd = \"\"\"\n      aws cloudformation validate-template \\\n        --template-body \"$(cat '#{file}')\"\n    \"\"\"\n    try\n      fn.tryExecRaw cmd, 'aws cloudformation validation error'\n    catch e\n      if @opts.continue\n        body = if e instanceof CfnError then e.body else e.body or e.stack\n        log.error(e.message, {body})\n      else throw e\n\n  writeTemplate: (file, key) ->\n    try\n      @template = @userPath(file)\n      @withKeyStack [], () =>\n        ret = @writeText(@transformTemplateFile(file), fn.fileExt(file), key, file)\n        @lint ret.tmpPath if @opts.linter\n        @validate ret.tmpPath if @opts.dovalidate\n        ret\n    catch e then @abort e\n\n  writeFile: (file, key) ->\n    ret = @writePaths(@canonicalHash(file, key), fn.fileExt(file))\n    log.verbose(\"wrote '#{@userPath file}' -> '#{ret.tmpPath}'\")\n    fs.copyFileSync(file, ret.tmpPath)\n    ret\n\n  writeDir: (dir, key) ->\n    tmpZip = @tmpPath(\"#{encodeURIComponent(@userPath(dir))}.zip\")\n    log.verbose(\"packaging: '#{dir}'\")\n    fn.execShell(\"zip -qr #{tmpZip} .\", {cwd: dir})\n    ret = @writePaths(@canonicalHash(dir, key), '.zip')\n    log.verbose(\"wrote '#{@userPath dir}' -> '#{ret.tmpPath}'\")\n    fs.renameSync(tmpZip, ret.tmpPath)\n    ret\n\n  userPath: (file) ->\n    ret = path.relative(@basedir, file)\n    if ret.startsWith('../') then path.resolve(ret) else ret\n\n  tmpPath: (name) ->\n    path.join(@opts.tmpdir, name)\n\n  pushFile: (file, f) ->\n    @addNested @userPath file\n    [old, @template] = [@template, @userPath(file)]\n    log.verbose(\"transforming '#{@template}'\")\n    ret = @withCwd path.dirname(file), (() -> f(path.basename(file)))\n    @template = old\n    ret\n\n  pushFileCaching: (file, f) ->\n    @withCache {pushFileCaching: [@ns, @userPath(file)]}, () => @pushFile(file, f)\n\n  defresource: (type, emit) ->\n    @resourceMacros[type] = emit\n    @\n\n  transform: (text, @bindstack = [{}]) ->\n    super(text)\n\n  transformFile: (templateFile, doc) ->\n    try\n      doc = doc or fs.readFileSync(templateFile).toString('utf-8')\n      @pushFileCaching templateFile, (file) =>\n        @transform doc, [{\n          CfnTool: {\n            BaseDir:      @basedir\n            TemplateFile: templateFile\n          }\n        }]\n    catch e then @abort e\n\nmodule.exports = CfnTransformer\n"
  ]
}