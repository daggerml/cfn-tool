// Generated by CoffeeScript 2.5.1
(function() {
  var CfnError, GetOpts, fn, getopts, path, uuid,
    indexOf = [].indexOf;

  getopts = require('getopts');

  path = require('path');

  uuid = require('uuid');

  fn = require('./fn');

  CfnError = require('./CfnError');

  GetOpts = class GetOpts {
    constructor(master) {
      this.master = master;
      this.fixRegion();
    }

    
    // HELPER METHODS

    allOpts() {
      return this.config.boolean.concat(this.config.string).sort();
    }

    allVars() {
      return Object.keys(this.var2opt()).sort();
    }

    useVars() {
      return Object.keys(this.var2opt()).reduce(function(xs, x) {
        if (process.env[x] != null) {
          return xs.concat([x]);
        } else {
          return xs;
        }
      }, []).sort();
    }

    opt2var(x) {
      if (x) {
        return this.master.opt2var(x);
      } else {
        return this.allOpts().reduce(((xs, x) => {
          return fn.assoc(xs, x, this.opt2var(x));
        }), {});
      }
    }

    var2opt(x) {
      var inv;
      inv = fn.invertObj(this.opt2var());
      if (x) {
        return inv[x];
      } else {
        return inv;
      }
    }

    config2opt(k, v) {
      if (!(indexOf.call(this.config.boolean, k) >= 0)) {
        return v;
      } else {
        return v === 'true';
      }
    }

    getVars() {
      return this.allOpts().reduce((xs, x) => {
        var v;
        v = process.env[this.opt2var(x)];
        if (v != null) {
          return fn.assoc(xs, x, this.config2opt(x, v));
        } else {
          return xs;
        }
      }, {});
    }

    setVars(opts, {clobber = false} = {}) {
      var o, ref, v;
      ref = this.opt2var();
      for (o in ref) {
        v = ref[o];
        if ((opts[o] != null) && (clobber || !(indexOf.call(this.useVars(), v) >= 0))) {
          process.env[v] = `${opts[o]}`;
        }
      }
      return this.fixRegion();
    }

    fixRegion() {
      var r1, r2;
      [r1, r2] = [process.env.AWS_REGION, process.env.AWS_DEFAULT_REGION];
      if ((r2 && !r1) || (r1 && r2 && r1 !== r2)) {
        process.env.AWS_REGION = r2;
      }
      if (r1 && !r2) {
        return process.env.AWS_DEFAULT_REGION = r1;
      }
    }

    
    // EXTERNAL API

    configure(opts = [], abort = true) {
      var optFilter;
      optFilter = function(x) {
        return indexOf.call(opts, x) >= 0;
      };
      return this.config = {
        alias: fn.selectKeys(this.master.alias, opts),
        boolean: this.master.boolean.slice().filter(optFilter),
        string: Object.keys(this.master.string).filter(optFilter),
        positional: Object.keys(this.master.positional).filter(optFilter),
        unknown: abort ? this.master.unknown : (function(x) {})
      };
    }

    usage() {
      var alias, args, bools, optarg, optbool, optpos, optstr, strs;
      bools = this.config.boolean;
      strs = this.config.string;
      args = this.config.positional;
      alias = (x) => {
        var y;
        if ((y = this.config.alias[x])) {
          return `-${y}, `;
        } else {
          return '';
        }
      };
      optbool = (x) => {
        return `[${alias(x)}--${x}]`;
      };
      optstr = (x) => {
        return `[${alias(x)}--${x}=${this.master.string[x]}]`;
      };
      optarg = (x) => {
        if (indexOf.call(bools, x) >= 0) {
          return optbool(x);
        } else {
          return optstr(x);
        }
      };
      optpos = (x) => {
        return this.master.positional[x];
      };
      return bools.concat(strs).sort().map(optarg).concat(args.map(optpos).filter(fn.identity));
    }

    parse(argv, dfl) {
      var arg, i, j, k, len, ref, ret;
      ret = getopts(argv, fn.assoc(this.config, 'default', Object.assign(this.getVars(), dfl)));
      ref = ret._;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        arg = ref[i];
        ((k = this.config.positional[i]) ? ret[k] = arg : void 0);
      }
      return ret;
    }

    loadConfig(exec, opts, file) {
      var parse, pat, uid;
      uid = uuid.v4();
      pat = `^\\(${this.allVars.join('\\|')}\\)$`;
      parse = (x, uid) => {
        var lines;
        lines = x.split('\n').map(function(x) {
          return x.trim();
        }).filter(fn.identity);
        lines = lines.slice(lines.indexOf(uid) + 2);
        return lines.reduce((xs, line) => {
          var k, v;
          [k, v] = fn.split(line, '=', 2);
          k = this.var2opt(k);
          v = Buffer.from(v, 'base64').toString('utf-8');
          if (k) {
            return fn.assoc(xs, k, this.config2opt(k, v));
          } else {
            return xs;
          }
        }, {});
      };
      this.setVars(opts);
      return this.setVars(parse(exec(`. '${file}'
echo
echo ${uid}
for i in $(compgen -A variable |grep '${pat}'); do
  echo $i=$(echo -n "\${!i}" |base64 -w0)
done`)));
    }

    validateArgs(opts) {
      var i, j, k, len, ref, results;
      ref = this.config.positional;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        k = ref[i];
        results.push(fn.assertOk(opts[k], `${this.master.positional[k] || k} argument required`));
      }
      return results;
    }

  };

  module.exports = GetOpts;

}).call(this);

//# sourceMappingURL=GetOpts.js.map
