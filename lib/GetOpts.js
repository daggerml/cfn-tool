// Generated by CoffeeScript 2.5.1
(function() {
  var CfnError, GetOpts, fn, fs, getopts, inspect, log, path, uuid,
    indexOf = [].indexOf;

  fs = require('fs');

  getopts = require('getopts');

  ({inspect} = require('util'));

  path = require('path');

  uuid = require('uuid');

  fn = require('./fn');

  log = require('./log');

  CfnError = require('./CfnError');

  GetOpts = class GetOpts {
    constructor(master) {
      this.master = master;
    }

    allOpts() {
      return this.config.boolean.concat(this.config.string);
    }

    allPos() {
      return this.config.positional;
    }

    configure(opts = [], abort = true) {
      var optf;
      optf = function(x) {
        return indexOf.call(opts, x) >= 0;
      };
      return this.config = {
        alias: fn.selectKeys(this.master.alias, opts),
        boolean: this.master.boolean.slice().filter(optf),
        string: Object.keys(this.master.string).filter(optf),
        positional: Object.keys(this.master.positional).filter(optf),
        unknown: abort ? this.master.unknown : (function(x) {})
      };
    }

    usage() {
      var alias, args, bools, optarg, optbool, optpos, optstr, strs;
      bools = this.config.boolean;
      strs = this.config.string;
      args = this.config.positional;
      alias = (x) => {
        var y;
        if ((y = this.config.alias[x])) {
          return `-${y}, `;
        } else {
          return '';
        }
      };
      optbool = function(x) {
        return `[${alias(x)}--${x}]`;
      };
      optstr = (x) => {
        return `[${alias(x)}--${x}=${this.master.string[x]}]`;
      };
      optarg = function(x) {
        if (indexOf.call(bools, x) >= 0) {
          return optbool(x);
        } else {
          return optstr(x);
        }
      };
      optpos = (x) => {
        return this.master.positional[x];
      };
      return bools.concat(strs).sort().map(optarg).concat(args.map(optpos).filter(fn.identity));
    }

    parse(argv) {
      var arg, args, i, j, k, len, opts, ref;
      opts = getopts(argv, this.config);
      args = this.config.positional;
      ref = opts._;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        arg = ref[i];
        ((k = args[i]) ? opts[k] = arg : void 0);
      }
      return fn.selectKeys(opts, this.allOpts().concat(this.allPos()));
    }

    validateArgs(opts) {
      var i, j, k, len, ref, results;
      ref = this.config.positional;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        k = ref[i];
        results.push(fn.assertOk(opts[k], `${this.master.positional[k] || k} argument required`));
      }
      return results;
    }

    completeOpt(words = []) {
      var longs, used;
      used = fn.objKeys(this.parse(words, {
        noenv: true
      })).map(function(x) {
        return `--${x}`;
      });
      longs = this.allOpts().map(function(x) {
        return `--${x}`;
      });
      return longs.sort().filter(function(x) {
        return !(indexOf.call(used, x) >= 0);
      });
    }

  };

  module.exports = GetOpts;

}).call(this);

//# sourceMappingURL=GetOpts.js.map
