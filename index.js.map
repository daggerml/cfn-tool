{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs                  = require 'fs'\nos                  = require 'os'\npath                = require 'path'\nsq                  = require 'shell-quote'\nGetOpts             = require './lib/GetOpts'\nyaml                = require 'js-yaml'\n{strict: assert}    = require 'assert'\ncompletions         = require './lib/completions'\nfn                  = require './lib/fn'\nlog                 = require './lib/log'\nCfnError            = require './lib/CfnError'\nCfnExit             = require './lib/CfnExit'\nCfnTransformer      = require './lib/cfn-transformer'\n{version: VERSION}  = require './package.json'\n\nclass CfnTool\n\n  constructor: () ->\n    @options = new GetOpts(\n      alias:\n        bucket:     'b'\n        help:       'h'\n        keep:       'k'\n        linter:     'l'\n        parameters: 'P'\n        profile:    'p'\n        quiet:      'q'\n        region:     'r'\n        tags:       't'\n        verbose:    'v'\n        version:    'V'\n      boolean: [\n        'help'\n        'keep'\n        'quiet'\n        'verbose'\n        'version'\n      ]\n      string:\n        bucket:     '<name>'\n        linter:     '<command>'\n        parameters: '\"<key>=<val> ...\"'\n        profile:    '<name>'\n        region:     '<name>'\n        tags:       '\"<key>=<val> ...\"'\n      positional:\n        command:    null\n        template:   '<template-file>'\n        stackname:  '<stack-name>'\n      complete:\n        bucket:     completions.none\n        linter:     completions.none\n        parameters: completions.none\n        profile:    completions.profile\n        region:     completions.region\n        tags:       completions.none\n        template:   completions.none\n        stackname:  completions.none\n      unknown: (x) => @abort new CfnError(\"unknown option: '#{x}'\")\n    )\n\n    @defaultOptionsSpec = [\n      'help'\n      'version'\n      'command'\n    ]\n\n    @optionsSpecs =\n      deploy: [\n        'bucket'\n        'help'\n        'keep'\n        'linter'\n        'parameters'\n        'profile'\n        'quiet'\n        'region'\n        'tags'\n        'verbose'\n        'command'\n        'template'\n        'stackname'\n      ]\n      transform: [\n        'help'\n        'linter'\n        'profile'\n        'quiet'\n        'region'\n        'verbose'\n        'command'\n        'template'\n      ]\n      update: [\n        'help'\n        'parameters'\n        'profile'\n        'quiet'\n        'region'\n        'verbose'\n        'command'\n        'stackname'\n      ]\n\n    @opts     = {}\n    @allCmds  = Object.keys(@optionsSpecs)\n\n  exit: (status = 0) ->\n    @exitStatus   = status\n    @sideEffects  = log.sideEffects()\n    throw new CfnExit(status)\n\n  quit: (msg, status = 0) ->\n    log.console msg\n    @exit status\n\n  abort: (e) ->\n    e = new CfnError(e.message) if e.code is 'ENOENT'\n    body = if e instanceof CfnError then e.body else e.body or e.stack\n    log.error(e.message, {body})\n    @exit 1\n\n  usageCmd: (prog, cmd) ->\n    @options.configure((if cmd then @optionsSpecs[cmd] else @defaultOptionsSpec), @env)\n    lpad  = (x) -> \"  #{x}\"\n    opts  = @options.usage().map(lpad).join(\"\\n\")\n    cmd   = if cmd then \" #{cmd}\" else ''\n    opts  = if opts then \"\\n#{opts}\" else ''\n    \"#{prog}#{cmd}#{opts}\"\n\n  usage: (prog, cmd, status) ->\n    manp  = [prog].concat(if cmd then [cmd] else []).join('-')\n    ucmd  = fn.partial @usageCmd, @, prog\n    text  = if cmd then ucmd(cmd) else [null].concat(@allCmds).map(ucmd).join(\"\\n\\n\")\n    @quit \"\"\"\n      #{text}\n\n      See the manpage:\n      * cmd: man #{manp}\n      * url: http://htmlpreview.github.io/?https://github.com/daggerml/cfn-tool/blob/#{VERSION}/man/#{manp}.html\n    \"\"\", status\n\n  version: () -> @quit VERSION\n\n  setAwsEnv: (opts) ->\n    (@env.AWS_REGION = @env.AWS_DEFAULT_REGION = opts.region) if opts.region\n    (@env.AWS_PROFILE = opts.profile) if opts.profile\n    [r1, r2] = [@env.AWS_REGION, @env.AWS_DEFAULT_REGION]\n    @env.AWS_REGION = r2 if (r2 and not r1) or (r1 and r2 and r1 isnt r2)\n    @env.AWS_DEFAULT_REGION  = r1 if (r1 and not r2)\n    opts\n\n  setLogLevel: (opts) ->\n    log.level switch\n      when opts.verbose then 'verbose'\n      when opts.quiet   then 'error'\n      else                   'info'\n    opts\n\n  #----------------------------------------------------------------------------\n  # PUBLIC API\n  #----------------------------------------------------------------------------\n\n  test: (f) ->\n    fn.testing true\n    try f() catch e\n      if e.name is 'CfnExit'\n        fn.testing(false) or @\n      else @test => @abort(e)\n\n  prod: (f) ->\n    try f() catch e\n      if e.name is 'CfnExit'\n        process.exit(e.status)\n      else @prod => @abort(e)\n\n  complete: (argv, @env) ->\n    log.level('console')\n    [$0, prefix, prev] = argv.slice(2)\n    cl      = @env.COMP_LINE\n    cp      = parseInt(@env.COMP_POINT)\n    suffix  = cl.slice(cp).match(/[^ ]*/)\n    left    = cl.slice(0, cp - prefix.length)\n    right   = cl.slice(cp + suffix.length)\n    words   = sq.parse([left, right].filter((x) -> x).join(' ')).slice(1)\n    command = words[0]\n\n    if $0 is prev and words.length < 2\n      @options.configure @defaultOptionsSpec, @env, false\n      @quit completions.list prefix, @allCmds.concat(@options.completeOpt(words))\n    else if (spec = @optionsSpecs[command])\n      @options.configure spec, @env, false\n      @opts = @options.completeOpt()\n      if prev in @opts\n        @quit(c(prefix)) if (c = @options.master.complete[prev.replace(/^-+/, '')])\n      if prefix.startsWith('-')\n        @quit completions.list prefix, @options.completeOpt(words)\n      @opts = @options.parse words, {noenv: true}\n      for x in @options.config.positional\n        continue if @opts[x]\n        @quit(c(prefix)) if (c = @options.master.complete[x])\n      @quit()\n    @quit completions.file prefix\n\n  cli: (argv, @env) ->\n    if (spec = @optionsSpecs[argv[2]]) then @options.configure(spec)\n    else @options.configure(@defaultOptionsSpec)\n\n    prog          = log.PROG\n    argv          = argv.slice(2)\n    @opts         = @setLogLevel @setAwsEnv @options.parse argv\n    @opts.tmpdir  = fn.tmpdir 'cfn-tool-', @opts.keep\n    cmdKnown      = (@opts.command in @allCmds) or not @opts.command\n\n    fn.assertOk cmdKnown, \"unknown command: '#{@opts.command}'\"\n\n    switch\n      when @opts.help        then @usage(prog, @opts.command)\n      when @opts.version     then @version()\n      when not @opts.command then @usage(prog, null, 1)\n\n    @options.validateArgs(@opts)\n\n    switch @opts.command\n      when 'transform'\n        Object.assign @opts,\n          dovalidate: false\n          dopackage:  false\n          bucket:     'example-bucket'\n          s3bucket:   'example-bucket'\n\n        log.verbose 'preparing template'\n        cfn = new CfnTransformer {@opts}\n        res = cfn.writeTemplate(@opts.template)\n\n        log.console fs.readFileSync(res.tmpPath).toString('utf-8').trimRight()\n      when 'deploy'\n        Object.assign @opts,\n          dovalidate: true\n          dopackage:  true\n          s3bucket:   @opts.bucket\n\n        log.info 'preparing templates'\n        cfn = new CfnTransformer {@opts}\n        res = cfn.writeTemplate(@opts.template)\n\n        if res.nested.length > 1\n          throw new CfnError('bucket required for nested stacks') unless @opts.bucket\n          log.info 'uploading templates to S3'\n          fn.execShell fn.shprintf \"\"\"\n            aws s3 sync --size-only %{%S} %{%S}\n          \"\"\", @opts.tmpdir, \"s3://#{@opts.bucket}\"\n\n        mkparams = (x) =>\n          if x\n            p = JSON.stringify sq.parse(x).map (x) ->\n              [k, v] = fn.split x, '=', 2\n              {ParameterKey: k, ParameterValue: v}\n            f = \"#{path.join @opts.tmpdir, fn.md5(p)}-params.json\"\n            fs.writeFileSync(f, p)\n            \"file://#{f}\"\n\n        log.info 'deploying stack'\n        fn.execShell fn.shprintf \"\"\"\n          aws cloudformation deploy \\\n            --template-file %{%S} \\\n            --stack-name %{%S} \\\n            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \\\n            %{--bucket %S }\\\n            %{--parameter-overrides %S }\\\n            %{--tags %A}\n        \"\"\", res.tmpPath, @opts.stackname, @opts.bucket, mkparams(@opts.parameters), @opts.tags\n\n        log.info 'done -- no errors'\n      when 'update'\n        res = JSON.parse fn.execShell \"\"\"\n          aws cloudformation describe-stacks --stack-name '#{@opts.stackname}'\n        \"\"\"\n\n        params = res?.Stacks?[0]?.Parameters?.reduce(\n          (xs, x) ->\n            k = x.ParameterKey\n            fn.assoc xs, k, {ParameterKey: k, UsePreviousValue: true}\n          {}\n        )\n        fn.assertOk Object.keys(params).length, \"stack '#{@opts.stackname}' has no parameters\"\n\n        haveOverride = null\n        if @opts.parameters\n          for x in (sq.parse(@opts.parameters) or [])\n            [k, v] = fn.split(x, '=', 2)\n            fn.assertOk k and v, \"parameter: expected <key>=<value>: got '#{x}'\"\n            fn.assertOk params[k], \"stack '#{@opts.stackname}' has no parameter '#{k}'\"\n            haveOverride = params[k] = {ParameterKey: k, ParameterValue: v}\n\n        fn.assertOk haveOverride, 'parameter overrides required'\n\n        params      = JSON.stringify fn.objVals params\n        paramsfile  = \"#{path.join @opts.tmpdir, fn.md5(params)}-params.json\"\n        fs.writeFileSync paramsfile, params\n        paramsfile  = \"file://#{paramsfile}\"\n\n        fn.execShell fn.shprintf \"\"\"\n          aws cloudformation update-stack \\\n            --stack-name %{%S} \\\n            --parameters %{%S} \\\n            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \\\n            --use-previous-template\n        \"\"\", @opts.stackname, paramsfile\n\n        log.info 'done -- no errors'\n\n    @quit()\n\nmodule.exports = CfnTool\n"
  ]
}