{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs                  = require 'fs'\nos                  = require 'os'\npath                = require 'path'\nuuid                = require 'uuid'\n{inspect}           = require 'util'\ngetopts             = require 'getopts'\nyaml                = require 'js-yaml'\n{strict: assert}    = require 'assert'\nlog                 = require './lib/log'\nCfnError            = require './lib/CfnError'\nCfnTransformer      = require './lib/cfn-transformer'\n{version: VERSION}  = require './package.json'\nAWS_VERSIONS        = [1, 2]\n\nidentity = (x) -> x\n\nassoc = (xs, k, v) ->\n  xs[k] = v\n  xs\n\nobjKeys = (x) -> Object.keys(x)\nobjVals = (x) -> objKeys(x).reduce(((ys, y) -> ys.concat([x[y]])), [])\n\nselectKeys = (o, ks) ->\n  Object.keys(o).reduce(((xs, x) -> if x in ks then assoc(xs, x, o[x]) else xs), {})\n\nsplit = (str, sep, count=Infinity) ->\n  toks  = str.split(sep)\n  n     = Math.min(toks.length, count) - 1\n  toks[0...n].concat(toks[n..].join(sep))\n\nassertOk = (x, msg, body) ->\n  throw new CfnError(msg, body) unless x\n  x\n\nquit = (msg) ->\n  console.log msg if msg\n  process.exit 0\n\nabort = (e) ->\n  throw e\n  e = new CfnError(e.message) if e.code is 'ENOENT'\n  body = if e instanceof CfnError then e.body else e.body or e.stack\n  log.error(e.message, {body})\n  process.exit 1\n\nprocess.on 'uncaughtException', abort\n\ntypeOf = (thing) ->\n  Object::toString.call(thing).slice(8,-1)\n\nabortOnException = (lib, fn) ->\n  (if typeOf(fn) is 'Array' then fn else [fn]).forEach (x) ->\n    global[x] = (args...) ->\n      try\n        lib[x].apply(lib, args)\n      catch e\n        abort(e)\n\nabortOnException fs, [\n  'writeFileSync'\n  'readFileSync'\n  'existsSync'\n]\n\nfixRegion = () ->\n  [r1, r2] = [process.env.AWS_REGION, process.env.AWS_DEFAULT_REGION]\n  process.env.AWS_REGION          = r2 if r1 and r2 and r1 isnt r2\n  process.env.AWS_REGION          = r2 if r2 and not r1\n  process.env.AWS_DEFAULT_REGION  = r1 if r1 and not r2\n\nfixRegion()\n\ndefaultOptionsSpec =\n  alias:\n    help:     'h'\n    version:  'V'\n  boolean:    ['help', 'version']\n  string:     []\n  unknown:    (x) -> abort new CfnError(\"unknown option: '#{x}'\")\n\noptionsSpecs =\n  deploy:\n    alias:\n      bucket:     'b'\n      config:     'c'\n      help:       'h'\n      keep:       'k'\n      linter:     'l'\n      parameters: 'P'\n      profile:    'p'\n      quiet:      'q'\n      region:     'r'\n      tags:       't'\n      verbose:    'v'\n      version:    'V'\n    boolean: [\n      'help'\n      'keep'\n      'quiet'\n      'verbose'\n      'version'\n    ]\n    string: [\n      'bucket'\n      'config'\n      'linter'\n      'parameters'\n      'profile'\n      'region'\n      'tags'\n    ]\n    unknown: (x) -> abort new CfnError(\"unknown option: '#{x}'\")\n  transform:\n    alias:\n      config:     'c'\n      help:       'h'\n      linter:     'l'\n      profile:    'p'\n      quiet:      'q'\n      region:     'r'\n      verbose:    'v'\n      version:    'V'\n    boolean: [\n      'help'\n      'quiet'\n      'verbose'\n      'version'\n    ]\n    string: [\n      'config'\n      'linter'\n      'profile'\n      'region'\n    ]\n    unknown: (x) -> abort new CfnError(\"unknown option: '#{x}'\")\n  update:\n    alias:\n      config:     'c'\n      help:       'h'\n      parameters: 'P'\n      profile:    'p'\n      quiet:      'q'\n      region:     'r'\n      verbose:    'v'\n      version:    'V'\n    boolean: [\n      'help'\n      'quiet'\n      'verbose'\n      'version'\n    ]\n    string: [\n      'config'\n      'parameters'\n      'profile'\n      'region'\n    ]\n    unknown: (x) -> abort new CfnError(\"unknown option: '#{x}'\")\n\ngetoptsConfig = optionsSpecs[process.argv[2]] or defaultOptionsSpec\n\nopt2var =\n  profile:    'AWS_PROFILE'\n  region:     'AWS_REGION'\n\nopt2var = getoptsConfig.boolean.concat(getoptsConfig.string).reduce(\n  (xs, x) -> assoc(xs, x, opt2var[x] or \"CFN_TOOL_#{x.toUpperCase()}\")\n  {}\n)\n\nallCmds = Object.keys(optionsSpecs)\nvar2opt = Object.keys(opt2var).reduce(((xs, x) -> assoc xs, opt2var[x], x), {})\nallOpts = Object.keys(opt2var)\nallVars = Object.keys(var2opt)\nuseVars = Object.keys(var2opt).reduce(\n  (xs, x) -> if process.env[x]? then xs.concat [x] else xs\n  []\n)\n\nconfig2opt = (k, v) ->\n  if not (k in getoptsConfig.boolean) then v else (v is 'true')\n\ngetVars = () ->\n  allOpts.reduce(\n    (xs, x) ->\n      v = process.env[opt2var[x]]\n      if v? then assoc(xs, x, config2opt(x, v)) else xs\n    {}\n  )\n\nsetVars = (opts, {clobber = false} = {}) ->\n  for o, v of opt2var\n    process.env[v] = \"#{opts[o]}\" if opts[o]? and (clobber or not (v in useVars))\n  fixRegion()\n\nusage = (command) ->\n  x = ['cfn-tool'].concat(if command then [command] else []).join('-') \n  quit \"\"\"\n    See the manpage:\n    * cmd: man #{x}\n    * url: http://htmlpreview.github.io/?https://github.com/daggerml/cfn-tool/blob/#{VERSION}/man/#{x}.html\n  \"\"\"\n\nversion = () ->\n  quit VERSION\n\nparseArgv = (argv) ->\n  opts  = getopts argv, assoc getoptsConfig, 'default', getVars()\n\n  [command, args...]  = opts._ or []\n  Object.assign(opts, {command, args})\n\n  assertOk(not command or command in allCmds, \"unknown command: '#{command}'\")\n\n  switch\n    when opts.help then usage(command)\n    when opts.version then version()\n\n  opts\n\nparseAwsVersion = (x) ->\n  Number x?.match(/^aws-cli\\/([0-9]+)\\./)?[1]\n\nparseConfig = (x, uid) ->\n  lines = x.split('\\n').map((x) -> x.trim()).filter(identity)\n  lines = lines.slice(lines.indexOf(uid) + 2)\n  lines.reduce(\n    (xs, line) ->\n      [k, v] = split(line, '=', 2)\n      k = var2opt[k]\n      v = Buffer.from(v, 'base64').toString('utf-8')\n      if k then assoc(xs, k, config2opt(k, v)) else xs\n    {}\n  )\n\nsetLogLevel = (opts) ->\n  log.level = switch\n    when opts.verbose then 'verbose'\n    when opts.quiet   then 'error'\n    else              'info'\n  opts\n\nmodule.exports = () ->\n  opts  = setLogLevel parseArgv process.argv.slice(2)\n  cfn   = new CfnTransformer {opts}\n  exec  = cfn.execShell.bind cfn\n  cfg   = opts.config or (existsSync('.cfn-tool') and '.cfn-tool')\n  uid   = uuid.v4()\n\n  if cfg\n    log.verbose \"using config file: #{cfg}\"\n    setVars opts\n    cfgscript = readFileSync(cfg)\n    try\n      setVars parseConfig exec \"\"\"\n        . '#{cfg}'\n        echo\n        echo #{uid}\n        for i in $(compgen -A variable |grep '^\\\\(AWS_\\\\|CFN_TOOL_\\\\)'); do\n          echo $i=$(echo -n \"${!i}\" |base64 -w0)\n        done\n      \"\"\"\n    catch e\n      e.message = e.message.split('\\n').shift()\n      throw e\n    opts = cfn.opts = setLogLevel parseArgv process.argv.slice(2)\n\n  setVars opts, {clobber: true}\n\n  opts.tmpdir = fs.mkdtempSync([os.tmpdir(), 'cfn-tool-'].join('/'))\n  process.on 'exit', () -> fs.rmdirSync opts.tmpdir, {recursive: true} unless opts.keep\n\n  log.verbose \"configuration options\", {body: inspect selectKeys(opts, allOpts)}\n\n  assertOk exec 'which aws', 'aws CLI tool not found on $PATH'\n  awsversion = parseAwsVersion(exec('aws --version'))\n  assertOk awsversion in AWS_VERSIONS,\n    \"unsupported aws CLI tool version: #{awsversion} (supported versions are #{AWS_VERSIONS})\"\n\n  switch opts.command\n\n    when 'transform'\n      Object.assign opts,\n        template:   opts.args[0]\n        dovalidate: false\n        dopackage:  false\n        bucket:     'example-bucket'\n        s3bucket:   'example-bucket'\n\n      assertOk opts.template, 'template argument required'\n\n      log.verbose 'preparing template'\n      res = cfn.writeTemplate(opts.template)\n      tpl = readFileSync(res.tmpPath).toString('utf-8')\n\n      console.log tpl.trimRight()\n\n    when 'deploy'\n      Object.assign opts,\n        template:   opts.args[0]\n        stackname:  opts.args[1]\n        dovalidate: true\n        dopackage:  true\n        s3bucket:   opts.bucket\n\n      assertOk opts.template, 'template argument required'\n      assertOk opts.stackname, 'stackname argument required'\n\n      log.info 'preparing templates'\n      res = cfn.writeTemplate(opts.template)\n      tpl = readFileSync(res.tmpPath).toString('utf-8')\n\n      if res.nested.length > 1\n        throw new CfnError('bucket required for nested stacks') unless opts.bucket\n        log.info 'uploading templates to S3'\n        exec \"aws s3 sync --size-only '#{cfn.tmpdir}' 's3://#{opts.bucket}/'\"\n\n      bucketarg = \"--s3-bucket '#{opts.bucket}' --s3-prefix aws/\" if opts.bucket\n      paramsarg = \"--parameter-overrides #{opts.parameters}\"      if opts.parameters\n      tagsarg   = \"--tags #{opts.tags}\"                           if opts.tags\n\n      log.info 'deploying stack'\n      exec \"\"\"\n        aws cloudformation deploy \\\n          --template-file '#{res.tmpPath}' \\\n          --stack-name '#{opts.stackname}' \\\n          --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \\\n          #{bucketarg or ''} #{paramsarg or ''} #{tagsarg or ''}\n      \"\"\"\n\n      log.info 'done -- no errors'\n\n    when 'update'\n      opts.stackname = opts.args[0]\n      assertOk opts.stackname, 'stackname argument required'\n\n      res = JSON.parse exec \"\"\"\n        aws cloudformation describe-stacks --stack-name '#{opts.stackname}'\n      \"\"\"\n\n      params = res?.Stacks?[0]?.Parameters?.reduce(\n        (xs, x) ->\n          k = x.ParameterKey\n          assoc xs, k, \"ParameterKey=#{k},UsePreviousValue=true\"\n        {}\n      )\n      assertOk Object.keys(params).length, \"stack '#{opts.stackname}' has no parameters\"\n\n      haveOverride = null\n      for x in (opts.parameters?.split(/ +/) or [])\n        [k, v] = split(x, '=', 2)\n        assertOk k and v, \"parameter: expected <key>=<value>: got '#{x}'\"\n        assertOk params[k], \"stack '#{opts.stackname}' has no parameter '#{k}'\"\n        haveOverride = params[k] = \"ParameterKey=#{k},ParameterValue=#{v}\"\n\n      assertOk haveOverride, 'parameter overrides required'\n\n      paramsarg = objVals(params).join(' ')\n\n      exec \"\"\"\n        aws cloudformation update-stack \\\n          --stack-name #{opts.stackname} \\\n          --parameters #{paramsarg} \\\n          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \\\n          ----use-previous-template\n      \"\"\"\n\n      log.info 'done -- no errors'\n\n  quit()\n"
  ]
}