{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs                  = require 'fs'\nos                  = require 'os'\npath                = require 'path'\n{inspect}           = require 'util'\nGetOpts             = require './lib/GetOpts'\nyaml                = require 'js-yaml'\n{strict: assert}    = require 'assert'\nfn                  = require './lib/fn'\nlog                 = require './lib/log'\nCfnError            = require './lib/CfnError'\nCfnTransformer      = require './lib/cfn-transformer'\n{version: VERSION}  = require './package.json'\nAWS_VERSIONS        = [1, 2]\n\nquit = (msg, status = 0) ->\n  console.log msg if msg\n  process.exit status\n\nabort = (e) ->\n  e = new CfnError(e.message) if e.code is 'ENOENT'\n  body = if e instanceof CfnError then e.body else e.body or e.stack\n  log.error(e.message, {body})\n  process.exit 1\n\nprocess.on 'uncaughtException', abort\n\nfn.abortOnException abort, fs, [\n  'writeFileSync'\n  'readFileSync'\n  'existsSync'\n]\n\ngetopts = new GetOpts(\n  alias:\n    bucket:     'b'\n    config:     'c'\n    help:       'h'\n    keep:       'k'\n    linter:     'l'\n    parameters: 'P'\n    profile:    'p'\n    quiet:      'q'\n    region:     'r'\n    tags:       't'\n    verbose:    'v'\n    version:    'V'\n  boolean: [\n    'help'\n    'keep'\n    'quiet'\n    'verbose'\n    'version'\n  ]\n  string:\n    bucket:     '<name>'\n    config:     '<file>'\n    linter:     '<command>'\n    parameters: '\"<key>=<val> ...\"'\n    profile:    '<name>'\n    region:     '<name>'\n    tags:       '\"<key>=<val> ...\"'\n  positional:\n    command:    null\n    template:   '<template-file>'\n    stackname:  '<stack-name>'\n  opt2var: (opt) ->\n    switch opt\n      when 'profile' then 'AWS_PROFILE'\n      when 'region' then 'AWS_REGION'\n      else \"CFN_TOOL_#{opt.toUpperCase()}\"\n  unknown: (x) -> abort new CfnError(\"unknown option: '#{x}'\")\n)\n\ndefaultOptionsSpec = [\n  'help'\n  'version'\n  'command'\n]\n\noptionsSpecs =\n  deploy: [\n    'bucket'\n    'config'\n    'help'\n    'keep'\n    'linter'\n    'parameters'\n    'profile'\n    'quiet'\n    'region'\n    'tags'\n    'verbose'\n    'command'\n    'template'\n    'stackname'\n  ]\n  transform: [\n    'config'\n    'help'\n    'linter'\n    'profile'\n    'quiet'\n    'region'\n    'tags'\n    'verbose'\n    'command'\n    'template'\n  ]\n  update: [\n    'config'\n    'help'\n    'parameters'\n    'profile'\n    'quiet'\n    'region'\n    'verbose'\n    'command'\n    'stackname'\n  ]\n\ndo (spec = optionsSpecs[process.argv[2]]) ->\n  if spec then getopts.configure(spec)\n  else getopts.configure(defaultOptionsSpec, false)\n\nallCmds = Object.keys(optionsSpecs)\n\nusageCmd = (cmd) ->\n  getopts.configure(if cmd then optionsSpecs[cmd] else defaultOptionsSpec)\n  prog  = path.basename(process.argv[1])\n  lpad  = (x) -> \"  #{x}\"\n  opts  = getopts.usage().map(lpad).join(\"\\n\")\n  \"#{prog}#{if cmd then \" #{cmd}\" else ''}#{if opts then \"\\n#{opts}\" else ''}\"\n\nusage = (cmd, status) ->\n  prog  = path.basename(process.argv[1])\n  manp  = [prog].concat(if cmd then [cmd] else []).join('-')\n  text  = if cmd then usageCmd(cmd) else [null].concat(allCmds).map(usageCmd).join(\"\\n\\n\")\n  quit \"\"\"\n    #{text}\n\n    See the manpage:\n    * cmd: man #{manp}\n    * url: http://htmlpreview.github.io/?https://github.com/daggerml/cfn-tool/blob/#{VERSION}/man/#{manp}.html\n  \"\"\", status\n\nversion = () ->\n  quit VERSION\n\nparseArgv = (argv) ->\n  opts  = getopts.parse argv\n  cmd   = opts.command\n  fn.assertOk(cmd in allCmds, \"unknown command: '#{cmd}'\") if cmd\n  switch\n    when opts.help then usage(cmd)\n    when opts.version then version()\n    when not cmd then usage(null, 1)\n  getopts.validateArgs(opts)\n  opts\n\nparseAwsVersion = (x) ->\n  Number x?.match(/^aws-cli\\/([0-9]+)\\./)?[1]\n\nsetLogLevel = (opts) ->\n  log.level = switch\n    when opts.verbose then 'verbose'\n    when opts.quiet   then 'error'\n    else              'info'\n  opts\n\nmodule.exports = () ->\n  opts  = setLogLevel parseArgv process.argv.slice(2)\n  cfn   = new CfnTransformer {opts}\n  exec  = cfn.execShell.bind cfn\n  cfg   = opts.config or (existsSync('.cfn-tool') and '.cfn-tool')\n\n  if cfg\n    log.verbose \"using config file: #{cfg}\"\n    try\n      getopts.loadConfig exec, opts, cfg\n    catch e\n      e.message = e.message.split('\\n').shift()\n      throw e\n    opts = cfn.opts = setLogLevel parseArgv process.argv.slice(2)\n\n  getopts.setVars opts, {clobber: true}\n\n  opts.tmpdir = fs.mkdtempSync([os.tmpdir(), 'cfn-tool-'].join('/'))\n  process.on 'exit', () -> fs.rmdirSync opts.tmpdir, {recursive: true} unless opts.keep\n\n  log.verbose \"configuration options\", {body: inspect fn.selectKeys(opts, getopts.allOpts())}\n\n  fn.assertOk exec 'which aws', 'aws CLI tool not found on $PATH'\n  awsversion = parseAwsVersion(exec('aws --version'))\n  fn.assertOk awsversion in AWS_VERSIONS,\n    \"unsupported aws CLI tool version: #{awsversion} (supported versions are #{AWS_VERSIONS})\"\n\n  switch opts.command\n\n    when 'transform'\n      Object.assign opts,\n        dovalidate: false\n        dopackage:  false\n        bucket:     'example-bucket'\n        s3bucket:   'example-bucket'\n\n      fn.assertOk opts.template, 'template argument required'\n\n      log.verbose 'preparing template'\n      res = cfn.writeTemplate(opts.template)\n      tpl = readFileSync(res.tmpPath).toString('utf-8')\n\n      console.log tpl.trimRight()\n\n    when 'deploy'\n      Object.assign opts,\n        dovalidate: true\n        dopackage:  true\n        s3bucket:   opts.bucket\n\n      fn.assertOk opts.template, 'template argument required'\n      fn.assertOk opts.stackname, 'stackname argument required'\n\n      log.info 'preparing templates'\n      res = cfn.writeTemplate(opts.template)\n      tpl = readFileSync(res.tmpPath).toString('utf-8')\n\n      if res.nested.length > 1\n        throw new CfnError('bucket required for nested stacks') unless opts.bucket\n        log.info 'uploading templates to S3'\n        exec \"aws s3 sync --size-only '#{cfn.tmpdir}' 's3://#{opts.bucket}/'\"\n\n      bucketarg = \"--s3-bucket '#{opts.bucket}' --s3-prefix aws/\" if opts.bucket\n      paramsarg = \"--parameter-overrides #{opts.parameters}\"      if opts.parameters\n      tagsarg   = \"--tags #{opts.tags}\"                           if opts.tags\n\n      log.info 'deploying stack'\n      exec \"\"\"\n        aws cloudformation deploy \\\n          --template-file '#{res.tmpPath}' \\\n          --stack-name '#{opts.stackname}' \\\n          --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \\\n          #{bucketarg or ''} #{paramsarg or ''} #{tagsarg or ''}\n      \"\"\"\n\n      log.info 'done -- no errors'\n\n    when 'update'\n      opts.stackname = opts.args[0]\n      fn.assertOk opts.stackname, 'stackname argument required'\n\n      res = JSON.parse exec \"\"\"\n        aws cloudformation describe-stacks --stack-name '#{opts.stackname}'\n      \"\"\"\n\n      params = res?.Stacks?[0]?.Parameters?.reduce(\n        (xs, x) ->\n          k = x.ParameterKey\n          fn.assoc xs, k, \"ParameterKey=#{k},UsePreviousValue=true\"\n        {}\n      )\n      fn.assertOk Object.keys(params).length, \"stack '#{opts.stackname}' has no parameters\"\n\n      haveOverride = null\n      for x in (opts.parameters?.split(/ +/) or [])\n        [k, v] = fn.split(x, '=', 2)\n        fn.assertOk k and v, \"parameter: expected <key>=<value>: got '#{x}'\"\n        fn.assertOk params[k], \"stack '#{opts.stackname}' has no parameter '#{k}'\"\n        haveOverride = params[k] = \"ParameterKey=#{k},ParameterValue=#{v}\"\n\n      fn.assertOk haveOverride, 'parameter overrides required'\n\n      paramsarg = objVals(params).join(' ')\n\n      exec \"\"\"\n        aws cloudformation update-stack \\\n          --stack-name #{opts.stackname} \\\n          --parameters #{paramsarg} \\\n          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \\\n          ----use-previous-template\n      \"\"\"\n\n      log.info 'done -- no errors'\n\n  quit()\n"
  ]
}