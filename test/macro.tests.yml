round-trips simple yaml docs:

  template:
    Foo:
      Bar: baz

  expected:
    Foo:
      Bar: baz

does not expand strings that look like dates implicitly:

  template:
    Foo: 2021-03-29

  expected:
    Foo: 2021-03-29

binds Mappings globally:

  template:
    <<: !Mappings
      Foo:
        Bar:
          Baz: baf
    File: !TemplateFile data/template2.yml

  expected:
    Mappings:
      Foo:
        Bar:
          Baz: baf
    File:
      Mappings:
        Foo:
          Bar:
            Baz: baf
            Quux: zxcv
          Omg:
            Lol: ok

allows empty object argument to Mappings:

  template:
    <<: !Mappings
      Foo:
        Bar:
          Baz: baf
    File: !TemplateFile data/template3.yml

  expected:
    Mappings:
      Foo:
        Bar:
          Baz: baf
    File:
      Mappings:
        Foo:
          Bar:
            Baz: baf

binds Globals globally:

  template:
    <<: !Globals
      Foo: 4242
    Stuff1:
      Thing: !Ref Foo
    Stuff2: !TemplateFile templates/globals.yml

  expected:
    Stuff1:
      Thing: 4242
    Stuff2:
      Thing: 4242

expands Parameters macros:

  template:
    <<: !Parameters
      - Foo
      - Bar Type=CommaDelimitedList

  expected:
    Parameters:
      Foo:
        Type: String
      Bar:
        Type: CommaDelimitedList

creates dynamic bindings with Let:

  template:
    <<: !Let
      MyName: nobody
      MyAge: 0
      Alice:
        MyName: alice
      Template:
        MyNameIs: !Ref MyName
        MyAgeIs: !Ref MyAge
    Foo: !Let
      - !Ref Alice
      - !Ref Template
    Bar: !Let
      - MyName: bob
        MyAge: 200
      - !Ref Template
    Baz:
      Ref: Template
      MyNameIs: charlie
    Baf: !Ref Template

  expected:
    Foo:
      MyNameIs: alice
      MyAgeIs: 0
    Bar:
      MyNameIs: bob
      MyAgeIs: 200
    Baz:
      MyNameIs: charlie
      MyAgeIs: 0
    Baf:
      MyNameIs: nobody
      MyAgeIs: 0

resolves indirect Let bindings:

  template:
    <<: !Let
      Key: !Shell echo Foo1
      Foo1:
        Bar:
          Baz: 100
      Foo2:
        Bar:
          Baz: 200
      Foo: !Ref [ !Ref Key ]
    Foo: !Ref Foo.Bar.Baz

  expected:
    Foo: 100

loads config from file:

  template:
    <<: !Let
      Zone: dev
      Config: !TemplateFile data/config4.yml
    Foo: !Ref Config.System1.Api.Domain

  expected:
    Foo:
      Fn::Join:
        - ''
        - - Fn::If:
              - IsProd
              - api
              - api-dev
          - .example.com

throws when a multi-segment Ref can't be resolved:

  template: |
    Foo: !Ref Bar.Baz

  throws: can't resolve

applies default value when Ref can't be resolved:

  template:
    <<: !Let
      Baz:
        Baf: 456
    Foo: !Ref [ Asdf.Qwer, { Zxcv: 123 } ]
    Bar: !Ref [ Baz.Baf, 123 ]

  expected:
    Foo:
      Zxcv: 123
    Bar: 456

substitites bindings in Refs and Subs:

  template:
    <<: !Let
      Binding1: val1
      Binding2: [val2, val3, val4]
      Binding3:
        Key1:
          Key2: 100
    Foo: !Ref Binding1
    Bar: !Ref Binding2
    Baz: !Ref Binding3.Key1.Key2
    Baf: !Sub 'hello ${Binding1} world!'

  expected:
    Foo: val1
    Bar:
      - val2
      - val3
      - val4
    Baz: 100
    Baf: hello val1 world!

substitutes env vars in Refs and Subs:

  template:
    Foo: !Ref '$MY_ENV_VAR'
    Bar: !Sub 'hello ${$MY_ENV_VAR} world!'

  expected:
    Foo: myval
    Bar: hello myval world!

substitutes mapping lookups in Refs and Subs:

  template:
    Foo: !Ref '%key.subkey'
    Bar: !Sub 'hello ${%key.subkey} world!'

  expected:
    Foo:
      Fn::FindInMap:
        - key
        - subkey
    Bar:
      Fn::Join:
        - ''
        - - 'hello '
          - Fn::FindInMap:
              - key
              - subkey
          - ' world!'

substitutes GetAtt lookups in Refs and Subs:

  template:
    Foo: !Ref '@Thing.ARN'
    Bar: !Sub 'hello ${@Thing.ARN} world!'

  expected:
    Foo:
      Fn::GetAtt:
        - Thing
        - ARN
    Bar:
      Fn::Join:
        - ''
        - - 'hello '
          - Fn::GetAtt:
              - Thing
              - ARN
          - ' world!'

substitutes ImportValue lookups in Refs and Subs:

  template:
    Foo: !Ref '*Thing::${AWS::Region}::Arn'
    Bar: !Sub 'hello ${*Thing::${AWS::Region}::Arn} world!'

  expected:
    Foo:
      Fn::ImportValue:
        Fn::Join:
          - ''
          - - 'Thing::'
            - Ref: AWS::Region
            - '::Arn'
    Bar:
      Fn::Join:
        - ''
        - - 'hello '
          - Fn::ImportValue:
              Fn::Join:
                - ''
                - - 'Thing::'
                  - Ref: AWS::Region
                  - '::Arn'
          - ' world!'

passes unresolved Refs through verbatim:

  template:
    Foo: !Ref Thing

  expected:
    Foo:
      Ref: Thing

throws when the argument to Ref is not a string:

  template: |
    !Ref [ !Sub 'Foo.${@Bar}.Baz' ]

  throws: expected a String

expands Sub macros:

  template:
    <<: !Let
      Test1: testval1
    Foo: !Sub ${!Literal}${Foo}${%${AWS::Region}.Vpc.CidrBlock}${@Bar.ARN}${Test1}
    Bar: !Sub
      - ${Test1} - ${Greet}, ${Name}!
      - Greet: !If [ Cond1, hello, goodbye ]
        Name: world

  expected:
    Foo:
      Fn::Join:
        - ''
        - - ${Literal}
          - Ref: Foo
          - Fn::FindInMap:
              - Ref: AWS::Region
              - Vpc
              - CidrBlock
          - Fn::GetAtt:
              - Bar
              - ARN
          - testval1
    Bar:
      Fn::Join:
        - ''
        - - 'testval1 - '
          - Fn::If:
              - Cond1
              - hello
              - goodbye
          - ', world!'

merges strings in Join:

  template:
    <<: !Let
      Bind1: one
      Bind2: two
    Foo: !Sub ${Bind1}=1,${Bind2}=2,${$MY_ENV_VAR}=3

  expected:
    Foo: one=1,two=2,myval=3

expands Resources macros:

  template:
    <<: !Let
      Nonce: Foop
      BucketTpl:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: !Ref Name
      Cond1: !If [ Foo, Bar, !Ref 'AWS::NoValue' ]
    <<: !Resources
      MyBucket${Nonce} AWS::S3::Bucket Condition=Prod DependsOn=[X,Y,Z]:
        BucketName: mybucket
      OtherBucket:
        Type: AWS::S3::Bucket
        Condition: Dev
        Properties:
          BucketName: otherbucket
      TemplateBucket: !Let
        - Name: templatebucket
        - !Ref BucketTpl
      CondRefBucket AWS::S3::Bucket Condition=${Cond1}:
        BucketName: condrefbucket

  expected:
    Resources:
      MyBucketFoop:
        Condition: Prod
        DependsOn:
          - X
          - 'Y'
          - Z
        Type: AWS::S3::Bucket
        Properties:
          BucketName: mybucket
      OtherBucket:
        Type: AWS::S3::Bucket
        Condition: Dev
        Properties:
          BucketName: otherbucket
      TemplateBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: templatebucket
      CondRefBucket:
        Type: AWS::S3::Bucket
        Condition:
          Fn::If:
            - Foo
            - Bar
            - Ref: AWS::NoValue
        Properties:
          BucketName: condrefbucket

expands Stack resource macros:

  template:
    <<: !Resources
      MyStack Stack:
        TemplateURL: foop
        Param1: hello world

  expected:
    Resources:
      MyStack:
        Type: AWS::CloudFormation::Stack
        Properties:
          Parameters:
            Param1: hello world
          TemplateURL: foop

expands bound templates:

  template:
    <<: !Let
      Tpl:
        Type: Stack
        Properties:
          TemplateURL: foop.yml
          Param1: !Ref Param1
    <<: !Resources
      Thing1: !Let
        - Param1: hello world
        - !Ref Tpl
      Thing2: !Let
        - Param1: goodbye world
        - !Ref Tpl

  expected:
    Resources:
      Thing1:
        Type: AWS::CloudFormation::Stack
        Properties:
          TemplateURL: foop.yml
          Parameters:
            Param1: hello world
      Thing2:
        Type: AWS::CloudFormation::Stack
        Properties:
          TemplateURL: foop.yml
          Parameters:
            Param1: goodbye world

expands Outputs macros:

  template:
    <<: !Outputs
      Foop: !Ref Foo
      Barp: !GetAtt Bar.ARN
      Bazp Name=${$ZONE}-${$REGION}-bazp: 123
      Quux Name=test2-${Zone}::foo::bar: 456

  expected:
    Outputs:
      Foop:
        Value:
          Ref: Foo
      Barp:
        Value:
          Fn::GetAtt:
            - Bar
            - ARN
      Bazp:
        Value: 123
        Export:
          Name: test-us-east-1-bazp
      Quux:
        Value: 456
        Export:
          Name:
            Fn::Join:
              - ''
              - - test2-
                - Ref: Zone
                - ::foo::bar

executes Shell commands:

  template:
    Foo: !Shell echo hello, world!
    Bar: !Shell
      - ZOOP: floop
        QOOP: bloop
      - echo $ZOOP $QOOP

  expected:
    Foo: hello, world!
    Bar: floop bloop

caches Shell results:

  template:
    <<: !Let
      Foo: !Shell echo $RANDOM
      Bar: !Shell echo $RANDOM
    Baz: !Shell
      - FOO: !Ref Foo
        BAR: !Ref Bar
      - '[ $FOO = $BAR ] && echo ok'

  expected:
    Baz: ok

executes Js commands:

  template:
    Foo: !Js "return 'hello, world!'"
    Bar: !Js
      - ZOOP: floop
        QOOP: bloop
      - return [ZOOP, QOOP]

  expected:
    Foo: hello, world!
    Bar:
      - floop
      - bloop

Js commands can access the module API via this:

  template:
    Foo: !Let
      - Doop: 4242
      - !Js "return this.bindings().Doop"

  expected:
    Foo: 4242

caches Js results:

  template:
    <<: !Let
      Foo: !Js return Math.random()
      Bar: !Js return Math.random()
    Baz: !Js
      - Foo: !Ref Foo
        Bar: !Ref Bar
      - return Foo == Bar

  expected:
    Baz: true

module API is accessible from Js commands:

  template:
    Foo: !Js |
      const result = this.macroexpand({"Fn::Sub": "Val=${Val}"});
      return `result=${JSON.stringify(result)}`;

  expected:
    Foo: 'result={"Fn::Join":["",["Val=",{"Ref":"Val"}]]}'

throws when module-only API method called in Js command:

  template: |
    Foo: !Js 'return this.state()'

  throws: only allowed in !Require modules

reads files and emits contents as string:

  template:
    Foo: !File data/data1.txt

  expected:
    Foo: |
      hello world

packages regular files:

  template:
    Foo:
      Bar: !PackageURL
        CacheKey: foobar
        Path: data/data1.txt
      Baz: !Package data/data1.txt
      Baf: !PackageURI data/data1.txt

  expected:
    Foo:
      Bar: https://s3.amazonaws.com/foop/d5c53bfdcd97503bd0f3ebe1eca56f4e.txt
      Baz:
        S3Bucket: foop
        S3Key: 6f5902ac237024bdd0c176cb93063dc4.txt
      Baf: s3://foop/6f5902ac237024bdd0c176cb93063dc4.txt

expands Do macros:

  template:
    Foo: !Do
      - !Let { Greet: world }
      - !Sub hello, ${Greet}!

  expected:
    Foo: hello, world!

the package map result can be transformed with a let binding:

  template:
    Foo: !Let
      - !Package data/data1.txt
      - MyBucket: !Ref S3Bucket
        MyKey: !Ref S3Key

  expected:
    Foo:
      MyBucket: foop
      MyKey: 6f5902ac237024bdd0c176cb93063dc4.txt

runs build scripts before packaging:

  template:
    Foo:
      Bar: !PackageURL [ !Shell 'make -C data data2.txt 1>&2 ; echo data/data2.txt' ]

  expected:
    Foo:
      Bar: https://s3.amazonaws.com/foop/f54a1fca2d39a6861ed89c203cbabe53.txt

compresses directories before packaging:

  template:
    Foo:
      Bar: !PackageURL data/dir

  expected:
    Foo:
      Bar: https://s3.amazonaws.com/foop/406c6249c02797097e4dcd57bf32acbd.zip

recursively packages templates:

  nested:
    - test/data/template.yml
    - test/data/dir/template.yml

  template:
    Foo:
      Bar: !PackageTemplateURL data/template.yml

  expected:
    Foo:
      Bar: https://s3.amazonaws.com/foop/6b5734f3c0d327082b58b60d79a639bb.yml

deep merges objects with DeepMerge:

  template:
    Test1: !DeepMerge
      - Foo:
          Bar: 2
      - Foo:
          Baz: 3

  expected:
    Test1:
      Foo:
        Bar: 2
        Baz: 3

loads template files with TemplateFile:

  template:
    <<: !Let
      Dir: data
      Name: config

    Foo: !TemplateFile data/config1.yml
    Bar: !DeepMerge [ !TemplateFile data/config1.yml, !TemplateFile data/config2.yml ]
    Baz: !TemplateFile [ !Sub '${Dir}/${Name}3.yml' ]

  expected:
    Foo:
      us-west-2:
        foo:
          bar: 100
    Bar:
      us-west-2:
        foo:
          bar: 200
          baz: 300
    Baz:
      us-west-2:
        foo:
          bar: 400
          baz: 300
          baf: 500

adds macros with Require:

  template:
    <<: !Require lib/case-macros
    Foo: !UpperCase AsDf
    Bar: !LowerCase AsDf

  expected:
    Foo: ASDF
    Bar: asdf

propagates module state to nested templates:

  template:
    <<: !Require lib/state-macros
    <<: !PutState [ Key, 4242 ]
    Foo: !GetState [ Key, not-found ]
    Bar: !TemplateFile data/template4.yml
    Baz: !GetState [ Key2, not-found ]

  expected:
    Foo: 4242
    Bar: 4242
    Baz: not-found
